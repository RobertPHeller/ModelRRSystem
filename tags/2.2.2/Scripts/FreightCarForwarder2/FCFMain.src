#!=WISH=
#* 
#* ------------------------------------------------------------------
#* FCFMain.src - FCF -- Main
#* Created by Robert Heller on Tue Oct 25 14:13:32 2005
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.12  2007/10/22 17:17:28  heller
#* Modification History: 10222007
#* Modification History:
#* Modification History: Revision 1.11  2007/10/16 13:04:19  heller
#* Modification History: *** empty log message ***
#* Modification History:
#* Modification History: Revision 1.10  2007/10/15 20:12:46  heller
#* Modification History: add -console option
#* Modification History:
#* Modification History: Revision 1.9  2007/10/15 19:57:48  heller
#* Modification History: variois vixes
#* Modification History:
#* Modification History: Revision 1.8  2007/09/30 15:48:32  heller
#* Modification History: Rev 2.1.10 Lockdown
#* Modification History:
#* Modification History: Revision 1.7  2007/05/06 12:49:45  heller
#* Modification History: Lock down  for 2.1.8 release candidate 1
#* Modification History:
#* Modification History: Revision 1.6  2007/04/19 17:23:24  heller
#* Modification History: April 19 Lock Down
#* Modification History:
#* Modification History: Revision 1.5  2007/02/01 20:00:54  heller
#* Modification History: Lock down for Release 2.1.7
#* Modification History:
#* Modification History: Revision 1.4  2006/05/22 17:01:12  heller
#* Modification History: Updated make install
#* Modification History:
#* Modification History: Revision 1.3  2006/03/06 18:46:20  heller
#* Modification History: March 6 lockdown
#* Modification History:
#* Modification History: Revision 1.2  2006/02/26 23:09:24  heller
#* Modification History: Lockdown for machine xfer
#* Modification History:
#* Modification History: Revision 1.1  2005/11/04 19:06:38  heller
#* Modification History: Nov 4, 2005 Lockdown
#* Modification History:
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

#* $Id$

## @defgroup FCFMain FCFMain
# @brief Freight Car Forwarder (V2)
#
# @section SYNOPIS
#
# FCFMain [X11 Resource Options] [SystemFile]
#
# @section DESCRIPTION
#
# The Freight Car Forwarder uses a collection of data files that describe the
# collection of available rolling stock (freight cars), the available 
# industries (both sources and destinations of goods and materials that need 
# to be moved over the rails), and the available scheduled trains.  These data 
# files along with a bit of random number generation are used to create switch
# lists of cars to be moved by specific trains during the next shift (operating 
# session) of the railroad.
#
# Each freight car is of a specific type, which implies the sort of goods or
# materials it can carry.  Each industry accepts certain types of cars as empty
# cars (cars the industry will load) and certain types of cars as loaded (cars
# that it will unload).  Industries have an associated yard, which in turn are 
# part of a division.  This allows for sensible scheduling on the proper trains,
# both the local switch moves as well as the mainline freights.
#
# 
#
# @section PARAMETERS
#
# @arg SystemFile The name of a system file to load (optional).
# @par
# @section AUTHOR
# Robert Heller \<heller\@deepsoft.com\>
#


set argv0 [file join [file dirname [info nameofexecutable]] FCFMain]

package require Version
namespace eval MRRSystem {variable FCFCLASSES_VERSION}
set MRRSystem::FCFCLASSES_VERSION [package require Fcfclasses]
package require gettext
package require Tk
package require tile
package require snit
#package require FCFdialog
package require snitStdMenuBar
package require HTMLHelp 2.0
package require Splash
package require MainWindow
package require ROText

global ImageDir 
set ImageDir [file join [file dirname [file dirname [info script]]] \
			FreightCarForwarder2]
global CommonImageDir 
set CommonImageDir [file join [file dirname [file dirname [info script]]] \
			Common]
global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Help]

set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"

image create photo banner -file [file join $ImageDir banner.gif]
# Image used as a banner for all dialog boxes.
# [index] banner!image

image create photo DeepwoodsBanner -format gif -file [file join $CommonImageDir DeepwoodsBanner.gif]
# Deepwoods banner image.  Used in the splash screen.
# [index] DeepwoodsBanner!image


global argcTest IsSlave
set argcTest 0
set IsSlave 0
set HasSystemFile 0

for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      incr argcTest
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -console {
	catch {console show}
    }
    -psn* {
    }
    -* {
    	puts stderr [_ "usage: %s \[wish options\] -- \[-isslave\] \[-console\] \[systemfile\]" $argv0]
	exit 96
    }
    default {
	if {$HasSystemFile == 0} {
	  set SystemFile "[lindex $argv $ia]"
	  incr HasSystemFile
	} else {
	  puts stderr [_ "usage: %s \[wish options\] -- \[-isslave\] \[-console\] \[systemfile\]" $argv0]
	  exit 96
	}
    }
  }
}




global HelpDir

proc SplashScreen {} {
  # Build the ``Splash Screen'' -- A popup window that tells the user what 
  # we are all about.  It gives the version and brief copyright information.
  #
  # The upper part of the splash screen gives the brief information, with
  # directions on how to get detailed information.  The lower part contains
  # an image banner for Deepwoods Software.
  # [index] SplashScreen!procedure

  splash .mrrSplash \
	-title [_ "Model Railroad Freight Car Forwarder 2.0, Copyright (C) \
2006-2007 Robert Heller D/B/A Deepwoods Software Model Railroad Freight Car \
Forwarder comes with ABSOLUTELY NO WARRANTY; for details select \
'Warranty...' under the Help menu.  This is free software, and you are \
welcome to redistribute it under certain conditions; select 'Copying...' \
under the Help menu. FCF Support Library version: %s. System patch level: %s."\
 $MRRSystem::FCFCLASSES_VERSION $MRRSystem::SYSTEMVERSION]\
	-icon banner -image DeepwoodsBanner -background {#2ba2bf} \
	-titleforeground white -statusforeground {black}
}

proc SplashWorkMessage {message percent} {
  global IsSlave
  if {!$IsSlave} {
    .mrrSplash update "$message" $percent
    update
  }
}

if {!$IsSlave} {
  SplashScreen
  update
}

SplashWorkMessage [_ "Building Main window"] 0



proc MainWindow {} {
  global CommonImageDir Main
  global LogWindow MainWindow

  wm protocol . WM_DELETE_WINDOW {CarefulExit}
  if {!$::IsSlave} {wm withdraw .}
  wm title . [_ "Freight Car Forwarder V2, using %s of Fcfclasses" [package versions Fcfclasses]]

  global FocusNowhere Main
  set FocusNowhere [canvas .focusNowhere]

  pack [set Main [mainwindow .main -dontwithdraw $::IsSlave]]  -expand yes -fill both
  $Main toolbar add tools
  $Main toolbar show tools
  $Main menu entryconfigure file [_m "Menu|File|New"] -state disabled
  $Main menu entryconfigure file [_m "Menu|File|Open..."] \
	-dynamichelp [_ "Open and Load System File"] \
        -command LoadSystem
  image create photo OpenButtonImage -file [file join $CommonImageDir open.gif]
  $Main toolbar addbutton tools open -image OpenButtonImage \
		-command LoadSystem \
		-helptext [_ "Open and Load System File"]
  $Main menu entryconfigure file [_m "Menu|File|Save As..."] -state disabled
  $Main menu entryconfigure file [_m "Menu|File|Print..."] -state disabled
  $Main menu entryconfigure file [_m "Menu|File|Close"] -command {CarefulExit} \
					-accelerator {Ctrl-Q}
  $Main menu entryconfigure file [_m "Menu|File|Exit"] -command {CarefulExit}
  set MainWindow [$Main scrollwindow getframe]
# Need Read-Only Text...
  set LogWindow [ROText $MainWindow.text]
  $Main scrollwindow setwidget $LogWindow

  $Main menu delete help [_m "Menu|Help|On Keys..."]
  $Main menu delete help [_m "Menu|Help|Index..."]
  $Main menu add help command \
	-label [_m "Menu|Help|Reference Manual"] \
	-command "HTMLHelp help {Freight Car Forwarder (V2) Reference}"
  $Main menu entryconfigure help [_m "Menu|Help|On Help..."] \
	-command "HTMLHelp help Help"
  $Main menu entryconfigure help [_m "Menu|Help|Tutorial..."] \
	-command "HTMLHelp help {Freight Car Forwarder (V2) Tutorial}"
  $Main menu entryconfigure help [_m "Menu|Help|On Version"] \
	-command "HTMLHelp help Version"
  $Main menu entryconfigure help [_m "Menu|Help|Copying"] \
	-command "HTMLHelp help Copying"
  $Main menu entryconfigure help [_m "Menu|Help|Warranty"] \
	-command "HTMLHelp help Warranty"
  
  if {$::tcl_platform(os) eq "Darwin"} {
      $Main menu add help command -label [_m "Menu|Help|About"] \
            -command ::tk::mac::standardAboutPanel
  }
  HTMLHelp setDefaults "$::HelpDir" "index.html#toc"
}

MainWindow

set FCFCarsLoaded [expr ![catch {package require FCFCars} message]]
if {!$FCFCarsLoaded} {puts stderr "*** package require FCFCars => $message"}
set FCFTrainsLoaded [expr ![catch {package require FCFTrains} message]]
if {!$FCFTrainsLoaded} {puts stderr "*** package require FCFTrains => $message"}
set FCFIndustriesLoaded [expr ![catch {package require FCFIndustries} message]]
if {!$FCFIndustriesLoaded} {puts stderr "*** package require FCFIndustries => $message"}
set FCFDivisionsLoaded [expr ![catch {package require FCFDivisions} message]]
if {!$FCFDivisionsLoaded} {puts stderr "*** package require FCFDivisions => $message"}
set FCFReportsLoaded [expr ![catch {package require FCFReports} message]]
if {!$FCFReportsLoaded} {puts stderr "*** package require FCFReports => $message"}
set FCFPrintersLoaded [expr ![catch {package require FCFPrinters} message]]
if {!$FCFPrintersLoaded} {puts stderr "*** package require FCFPrinter => $message"}



proc UnPostMenu {menu} {
#  global errorInfo
#  puts stderr "*** UnPostMenu: errorInfo = $errorInfo"
  catch {
    upvar #0 $menu data
    $menu unpost
    focus $data(oldfocus)      
  }
}

proc PostMenuOnPointer {menu w} {
  set X [winfo pointerx $w]
  set Y [winfo pointery $w]

#  global errorInfo
#  puts stderr "*** PostMenuOnWidget: errorInfo = $errorInfo"
  $menu activate none
  $menu post $X $Y
  upvar #0 $menu data
  set data(oldfocus) [focus]
  focus $menu
}

proc SetBusy {w flag} {
  global FocusNowhere
  switch [string tolower "$flag"] {
    1 -
    on -
    yes {
        if {[string equal [grab current $w] $FocusNowhere]} {return}
	catch {array unset ::WatchList}
	SetWatchCursor [winfo toplevel $w]
	grab $FocusNowhere
    }
    0 -
    off -
    no {
	if {![string equal [grab current $w] $FocusNowhere]} {return}
	UnSetWatchCursor
	grab release $FocusNowhere
    }
  }
}

proc SetWatchCursor {w} {
  global WatchList
  if {![catch {$w cget -cursor} oldcursor] && [winfo ismapped $w]} {
    set WatchList($w) $oldcursor
    catch {$w configure -cursor watch}
  }
  foreach iw [winfo children $w] {
    SetWatchCursor $iw
  }
}

proc UnSetWatchCursor {} {
  global WatchList
  foreach w [array names WatchList] {
    catch {$w configure -cursor "$WatchList($w)"}
  }
}
	
proc WIPStart {{message {}}} {
  global Main
  $Main wipmessage configure -text "$message"
  $Main setprogress 0
  $Main setstatus {}
  SetBusy $::Main on
  update idle
}

proc WIPUpdate {value {message {}}} {
  global Main
  $Main setstatus "$message"
  $Main setprogress $value
  if {$value >= 100} {
    SetBusy $::Main off
  }
  update idle
}

proc WIPDone {{message {}}} {
  WIPUpdate 100 "$message"
  update idle
}

Tcl8WorkInProgressCallback WIP WIPStart WIPUpdate WIPDone

proc LogMessage {type message} {
  global LogWindow

  switch -exact "$type" {
    :informational {
      $LogWindow insert end "$message"
      $LogWindow see end
    }
    :warning {
      tk_messageBox -icon warning -type ok -message "$message"
    }  
    :error {
      tk_messageBox -icon error -type ok -message "$message"
    }
  }
}

Tcl8LogMessageCallback Log LogMessage

proc ShowBanner {} {
  global LogWindow
  $LogWindow insert end "\n[TheSystem SystemName]\n\n" BOLD
  $LogWindow see end
  update idle
}

Tcl8ShowBannerCallback Banner ShowBanner

proc MakeSeed {} {
  set dtlist [split [clock format [clock seconds] -format {%y %m %d %H %M %S}] " "]
  set sum 0
  foreach i $dtlist {
    set ii "[string trimleft $i {0}]"
    if {"$ii" == {}} {set ii 0}
    incr sum $ii
  }
  return $sum
}  


proc LoadSystem {{fileName {}}} {
  global LogWindow Main
  if {[string length "$fileName"] == 0} {
    set fileName [tk_getOpenFile \
	-defaultextension {.dat} \
	-initialfile system.dat \
	-parent . \
	-title [_ "Name of a system file to load"]]
  }
  if {[string length "$fileName"] == 0} {return}
  if {[llength [info commands TheSystem]] > 0} {
    rename TheSystem {}
  }
  #puts stderr "*** LoadSystem: before system load"
  System TheSystem [file nativename "$fileName"] [MakeSeed]
  #puts stderr "*** LoadSystem: after system load"
  $LogWindow insert end \
	"$fileName loaded:\n"
  #puts stderr "*** LoadSystem: $fileName loaded:"
  $LogWindow insert end \
	"[TheSystem SystemName] [TheSystem SessionNumber] [TheSystem ShiftNumber]\n"
  #puts stderr "*** LoadSystem: [TheSystem SystemName] [TheSystem SessionNumber] [TheSystem ShiftNumber]"
  $LogWindow insert end \
	[_ "%d Divisions\n" [TheSystem NumberOfDivisions]]
  #puts stderr "*** LoadSystem: [TheSystem NumberOfDivisions] Divisions" 
  $LogWindow insert end \
	[_ "%d Stations\n" [TheSystem NumberOfStations]]
  #puts stderr "*** LoadSystem: [TheSystem NumberOfStations] Stations"
  $LogWindow insert end \
	[_ "%d Industries\n" [TheSystem NumberOfIndustries]]
  #puts stderr "*** LoadSystem: [TheSystem NumberOfIndustries] Industries"
  $LogWindow insert end \
	[_ "%d Cars\n" [TheSystem NumberOfCars]]
  #puts stderr "*** LoadSystem: [TheSystem NumberOfCars] Cars"
  $LogWindow insert end \
	[_ "%d Trains\n" [TheSystem NumberOfTrains]]
  #puts stderr "*** LoadSystem: [TheSystem NumberOfTrains] Trains"
  $LogWindow see end
  $Main buttons configure -state disabled
  $Main buttons configure -state normal
  $Main menu entryconfigure file Save -state normal
  $Main toolbar setbuttonstate tools normal
  global FCFCarsLoaded
  if {$FCFCarsLoaded} {UpdateCarDisplayOptionMenus}
  #puts stderr "*** LoadSystem: returning"
}

proc CarefulExit {{answer no}} {
  if {!$answer} {
    set answer "[tk_messageBox -icon question -type yesno -message [_ "Really Exit?"]]"
  }
  switch -exact $answer {
    no {return}
    yes {
	global IsSlave
	flush stderr
	if {$IsSlave} {
	  puts stdout "101 Exit"
	  flush stdout
	  set ans [gets stdin]
	}
	if {[llength [info commands TheSystem]] > 0} {
	  rename TheSystem {}
	}
	if {[llength [info commands CurrentPrinter]] > 0} {
	  if {[CurrentPrinter IsOpenP]} {
	    CurrentPrinter ClosePrinter
	  }
	  rename CurrentPrinter {}
	}
	exit
    }
  }
}


SplashWorkMessage [_ "Adding button menu and toolbar items"] 70

if {$FCFCarsLoaded} {
  image create photo LoadCarsButtonImage -file [file join $ImageDir loadcars.gif]
  $Main toolbar addbutton tools loadcars -image LoadCarsButtonImage \
			-command LoadCars \
			-state disabled \
			-helptext [_ "(Re-)Load Cars File"]
  $Main buttons add ttk::button loadcars \
			-text [_m "Button|Load Cars File L"] \
			-command LoadCars \
			-state disabled
  bind Main <L> "$Main buttons invoke loadcars"
  bind Main <l> "$Main buttons invoke loadcars"
  $Main menu entryconfigure file [_m "Menu|File|Save"] \
	-dynamichelp [_ "Save Cars"] \
	-command SaveCars \
	-state disabled
  image create photo SaveButtonImage -file [file join $CommonImageDir save.gif]
  $Main toolbar addbutton tools savecars -image SaveButtonImage \
		-command SaveCars \
		-helptext [_ "Save Cars"] \
		-state disabled
  $Main buttons add ttk::button savecars \
			-text [_m "Button|Save Cars File S"] -command SaveCars \
			  -state disabled
  bind Main <S> "$Main buttons invoke savecars"
  bind Main <s> "$Main buttons invoke savecars"
  if {0} {
    $Main buttons add ttk::button groups \
			-text [_m "Button|Car Selection Groups G"] -command SelectGroups \
			-state disabled
    bind Main <G> "$Main buttons invoke groups"
    bind Main <g> "$Main buttons invoke groups"
  }
}
if {$FCFTrainsLoaded} {
  $Main buttons add ttk::button manageTrnPrint \
			-text [_m "Menu|Manage trains/printing M"] \
			-state disabled
  bind Main <M> "$Main buttons invoke manageTrnPrint"
  bind Main <m> "$Main buttons invoke manageTrnPrint"
  set menu [CreateManageTrainsPrintingMenu $Main manageTrnPrint]
  image create photo ManageTrainsPrintingImage \
		-file [file join $ImageDir managetrainsprint.gif]
  $Main toolbar addbutton tools manageTrnPrint \
		-image ManageTrainsPrintingImage \
		-command [list PostMenuOnPointer $menu $Main] \
		-state disabled \
		-helptext [_ "Manage Train Printing Menu"]

}

if {$FCFCarsLoaded} {
  image create photo ViewCarImage -file [file join $ImageDir viewcar.gif]
  $Main toolbar addbutton tools viewcar -image ViewCarImage \
		-command ViewCar \
		-state disabled \
		-helptext [_ "View one Car"]
  $Main buttons add ttk::button viewcar \
			-text [_m "Button|View Car Information V"] -command ViewCar \
			-state disabled
  bind Main <V> "$Main buttons invoke viewcar"
  bind Main <v> "$Main buttons invoke viewcar"
  image create photo EditCarImage -file [file join $ImageDir editcar.gif]
  $Main toolbar addbutton tools editcar -image EditCarImage \
			-command EditCar \
			-state disabled \
			-helptext [_ "Edit a Car"]
  $Main buttons add ttk::button editcar \
			-text [_m "Button|Edit Car Information E"] -command EditCar \
			 -state disabled
  bind Main <E> "$Main buttons invoke editcar"
  bind Main <e> "$Main buttons invoke editcar"
  image create photo AddCarImage -file [file join $ImageDir addcar.gif]
  $Main toolbar addbutton tools addcar -image AddCarImage \
			-command AddNewCar \
			-state disabled \
			-helptext [_ "Add a new Car"]
  $Main buttons add ttk::button addcar \
			-text [_m "Button|Add a New Car N"] -command AddNewCar \
			-state disabled
  bind Main <N> "$Main buttons invoke addcar"
  bind Main <n> "$Main buttons invoke addcar"
  image create photo DeleteCarImage -file [file join $ImageDir deletecar.gif]
  $Main toolbar addbutton tools deletecar -image DeleteCarImage \
			-command DeleteCar \
			-state disabled \
			-helptext [_ "Delete an existing Car"]
  $Main buttons add ttk::button deletecar \
			-text [_m "Button|Delete An Existing Car D"] -command DeleteCar \
			   -state disabled
  bind Main <D> "$Main buttons invoke deletecar"
  bind Main <d> "$Main buttons invoke deletecar"
  image create photo UnassignedCarsImage \
		-file [file join $ImageDir unassignedcars.gif]
  $Main toolbar addbutton tools unassignedcars -image UnassignedCarsImage \
		-command ShowUnassignedCars \
		-state disabled \
		-helptext [_ "Show Unassigned Cars"]
  $Main buttons add ttk::button unassignedcars \
			-text [_m "Button|Show Unassigned Cars U"] \
				-command ShowUnassignedCars \
				-state disabled
  bind Main <U> "$Main buttons invoke unassignedcars"
  bind Main <u> "$Main buttons invoke unassignedcars"
  image create photo AssignCarsImage \
		-file [file join $ImageDir assigncars.gif]
  $Main toolbar addbutton tools assigncars -image AssignCarsImage \
		-command AssignCars \
		-state disabled \
		-helptext [_ "Run the Car Assignment procedure"]
  $Main buttons add ttk::button assigncars \
			-text [_m "Button|Run Car Assignments A"] \
			    -command AssignCars \
			    -state disabled
  bind Main <A> "$Main buttons invoke assigncars"
  bind Main <a> "$Main buttons invoke assigncars"
}
if {$FCFTrainsLoaded} {
  image create photo RunAllTrainsImage \
		-file [file join $ImageDir runalltrains.gif]
  $Main toolbar addbutton tools runalltrains -image RunAllTrainsImage \
			-command RunAllTrains \
			-state disabled \
			-helptext [_ "Run All Trains In Operating Session"]
  $Main buttons add ttk::button runalltrains \
			-text [_m "Button|Run All Trains In Operating Session O"] \
			      -command RunAllTrains \
			      -state disabled
  bind Main <O> "$Main buttons invoke runalltrains"
  bind Main <o> "$Main buttons invoke runalltrains"
  image create photo RunBoxMovesImage \
		-file [file join $ImageDir runboxmoves.gif]
  $Main toolbar addbutton tools runboxmoves -image RunBoxMovesImage \
			-command RunBoxMoves \
			-state disabled \
			-helptext [_ "Run Boxmove Trains"]
  $Main buttons add ttk::button runboxmovetrains \
			-text [_m "Button|Run Boxmove Trains B"] \
				  -command RunBoxMoves \
			          -state disabled
  bind Main <B> "$Main buttons invoke runboxmovetrains"
  bind Main <b> "$Main buttons invoke runboxmovetrains"
  image create photo RunOneTrainImage \
		-file [file join $ImageDir runonetrain.gif]
  $Main toolbar addbutton tools runonetrain -image RunOneTrainImage \
			-command RunOneTrain \
			-state disabled \
			-helptext [_ "Run a single train"]
  $Main buttons add ttk::button runonetrain \
			-text [_m "Button|Run Trains One At A Time T"] \
			     -command RunOneTrain \
			     -state disabled
  bind Main <T> "$Main buttons invoke runonetrain"
  bind Main <t> "$Main buttons invoke runonetrain"
}
if {$FCFPrintersLoaded} {
  image create photo PrintImage \
		-file [file join $CommonImageDir print.gif]
  $Main toolbar addbutton tools openprinter -image PrintImage \
		-command OpenPrinter \
		-helptext [_ "Open printer"]
  $Main buttons add ttk::button openprinter \
			-text [_m "Button|Open Printer  Alt-P"] \
			   -command OpenPrinter
  bind Main <Alt-P> "$Main buttons invoke openprinter"
  bind Main <Alt-p> "$Main buttons invoke openprinter"
  image create photo ClosePrintImage \
		-file [file join $ImageDir closeprint.gif]
  global PrinterIndicator
  set PrinterIndicator [$Main mainframe addindicator \
				-relief flat -borderwidth 4 \
				-image ClosePrintImage]
  $Main toolbar addbutton tools closeprinter -image ClosePrintImage \
  		-command ClosePrinter \
		-helptext [_ "Close printer"]
  $Main buttons add ttk::button closeprinter \
			-text [_m "Button|Close Printer  Alt-C"] \
			   -command ClosePrinter
  bind Main <Alt-C> "$Main buttons invoke closeprinter"
  bind Main <Alt-c> "$Main buttons invoke closeprinter"
  image create photo YardPrintImage \
		-file [file join $ImageDir yardprint.gif]
  $Main toolbar addbutton tools printyard -image YardPrintImage \
  		-command PrintYardLists \
		-state disabled \
		-helptext [_ "Print Yard lists and other lists"]
  $Main buttons add ttk::button printyard \
			-text [_m "Button|Print Yard Lists, etc. P"] \
			   -command PrintYardLists \
			   -state disabled
  bind Main <P> "$Main buttons invoke printyard"
  bind Main <p> "$Main buttons invoke printyard"
}
if {$FCFCarsLoaded} {
  $Main buttons add ttk::button showcars \
			-text [_m "Menu|Show Cars On Screen C"] \
			  -state disabled
  bind Main <C> "$Main buttons invoke showcars"
  bind Main <c> "$Main buttons invoke showcars"
  set menu [CreateShowCarsMenu $Main showcars]
  image create photo ShowCarsImage \
		-file [file join $ImageDir showcars.gif]
  $Main toolbar addbutton tools showcars -image ShowCarsImage \
		-command [list PostMenuOnPointer $menu $Main] \
		-state disabled \
		-helptext [_ "Show cars on screen"]
}
if {$FCFReportsLoaded && $FCFPrintersLoaded} {
  $Main buttons add ttk::button reportsmenu \
			-text [_m "Menu|Reports Menu R"] \
			     -state disabled
  bind Main <R> "$Main buttons invoke reportsmenu"
  bind Main <r> "$Main buttons invoke reportsmenu"
  set menu [CreateReportsMenu $Main reportsmenu]
  image create photo ReportsImage -file [file join $ImageDir reports.gif]
  $Main toolbar addbutton tools reportsmenu -image ReportsImage \
	-command [list PostMenuOnPointer $menu $Main] \
	-state disabled \
	-helptext [_ "Reports menu"]
}
if {$FCFIndustriesLoaded} {
  image create photo ResetIndustriesImage \
	-file [file join $ImageDir resetIndustries.gif]
  $Main toolbar addbutton tools resetindustries -image ResetIndustriesImage \
	-command ResetIndustryStatistics \
	-state disabled \
	-helptext [_ "Reset industry statistics"]
  $Main buttons add ttk::button resetindustries \
			-text [_m "Button|Reset Industry Statistics I"] \
				 -command ResetIndustryStatistics \
			         -state disabled
  bind Main <I> "$Main buttons invoke resetindustries"
  bind Main <i> "$Main buttons invoke resetindustries"
}
if {$FCFTrainsLoaded} {
  CreateTrainDisplay
}
if {$FCFCarsLoaded} {
  CreateCarDisplay
}

$Main buttons add ttk::button quit \
			-text [_m "Button|Quit -- Exit NOW Q"] \
			-command CarefulExit
bind Main <Q> "$Main buttons invoke quit"
bind Main <q> "$Main buttons invoke quit"

image create photo CloseButtonImage -file [file join $CommonImageDir close.gif]
$Main toolbar addbutton tools close -image CloseButtonImage \
	-command CarefulExit \
	-helptext [_ "Close the application"]

proc _AddBindTag {w tag} {
  if {[string equal [winfo class $w] Entry]} {return}
  if {[string equal [winfo class $w] Text]} {return}
  if {[string equal [winfo toplevel $w] $w] && ![string equal $w .]} {return}
  bindtags $w [linsert [bindtags $w] end $tag]
  foreach c [winfo children $w] {_AddBindTag $c $tag}
}

_AddBindTag . Main



update idle
set extraX 0
foreach s [$Main slideout list] {
  set rw [$Main slideout reqwidth $s]
  if {$rw > $extraX} {set extraX $rw}
}


if {!$IsSlave} {$Main showit $extraX}
  
if {$HasSystemFile > 0} {LoadSystem "$SystemFile"}

catch {SplashWorkMessage {Done} 100}


if {$IsSlave} {
  fileevent stdin readable {
    if {[gets stdin line] < 0} {CarefulExit yes}
    switch -- "$line" {
      {201 Exit} {CarefulExit yes}
      default {}
    }
  }
}

if {$::tcl_platform(os) eq "Darwin"} {
    proc ::tk::mac::ReopenApplication {} {
        if {[wm state .] eq "withdrawn"} {
            wm state . normal
        } else {
            wm deiconify .
        }
    }
    proc ::tk::mac::Quit {} {
        CarefulExit
    }
    proc ::tk::mac::OnHide {} {
        wm withdraw .
    }
    proc ::tk::mac::OnShow {} {
        if {[wm state .] eq "withdrawn"} {
            wm state . normal
        } else {
            wm deiconify .
        }
    }
    
    proc ::tk::mac::ShowHelp {} {
        HTMLHelp help {Freight Car Forwarder (V2) Reference}
    }
}

