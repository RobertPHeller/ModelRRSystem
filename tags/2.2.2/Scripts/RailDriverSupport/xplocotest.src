#* 
#* ------------------------------------------------------------------
#* xplocotest.src - XPressNet <=> Raildriver interface test program
#* Created by Robert Heller on Wed May 23 12:44:31 2012
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2012  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id$

## @defgroup xplocotest xplocotest
#  @brief XPressNet <=> RailDriver interface test program.
#
# @section SYNOPSIS
#
# xplocotest [-xpnetport XPressNetport] [-rdport RailDriverport] [-locoaddress LocoAddress]
#
# @section DESCRIPTION
#
# This program implements a simple throttle interface between a PI Engineering
# RailDriver and a XPressNet DCC system controlling a selected locomotive.
# 
# The reverser, throttle, independent brake, and headlight switch behave as
# one would expect.  The program implements simple inertia and entropy.
# Advancing the throttle causes the loco to accerate, reducing the throttle 
# slows the rate of acceration.  Moving the throttle to zero does not stop the
# loco, instead it slowly rolls to a stop (entropy), unless the independent 
# brake is applied, in which case the loco comes to a stop faster (more
# brake application slows the loco faster).  The headlight switch turns on
# or off function 0 (headlights).  The E-Stop button stops the loco and exits
# the program.
#
# @section OPTIONS
#
# @arg -xpnetport The serial port connected to the Li101F is connected
#	to or the serial port the LiUSB shows up as. The default is /dev/ttyS5.
# @arg -rdport The Tcp/Ip port the Raildriver daemon is listening on. The default is 41000.
# @arg -locoaddress The address of the loco to control. The default is 800.
# @par
#
# @section AUTHOR 
# Robert Heller \<heller\@deepsoft.com\>
#

set argv0 [file join  [file dirname [info nameofexecutable]] xplocotest]

package require Xpressnet 2.0.0
package require gettext
package require RaildriverClient

set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
							[info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"

snit::type InertiaEntryThrottle {
  option -xpnetport -default /dev/ttyS5
  option -rdport    -default 41000
  option -locoaddress -default 800

  component xpressnet
  component raildriver

  variable InstructionQueue {}

  constructor {args} {
    $self configurelist $args

    puts stderr "*** $type create $self $args"
    install xpressnet using xpressnet::XpressNetEvent \
		%%AUTO%% [mymethod _processResponse] $options(-xpnetport)
    puts stderr "*** $type create $self: xpressnet = $xpressnet"
    install raildriver using raildriver::RaildriverClient %%AUTO%% \
		-port $options(-rdport) \
		-pollevents [list REVERSER THROTTLE INDEPENDBRK HEADLIGHT \
				  DIGITAL5] \
		-eventhandler [mymethod _rdeventhandler]
    puts stderr "*** $type create $self: raildriver = $raildriver"
 
  }
  method _processResponse {response_type response} {

    puts stderr "*** $self _processResponse: response_type is $response_type"
    if {[llength $InstructionQueue] > 0} {
      set cmd [lindex $InstructionQueue 0]
      set InstructionQueue [lrange $InstructionQueue 1 end]
      if {$cmd eq {%SHUTDOWN%}} {
	$xpressnet destroy
	exit
      }
      eval $xpressnet $cmd
#      puts stderr "*** $self _processResponse: cmd is $cmd"
      
    }
  }
  variable CurrentSpeed 0
  variable Direction 0
  variable Headlight off
  typevariable MaximumSpeed 30
  typevariable ThrottleValues -array {
   0  0   1  0   2  0   3  0   4  0   5  0   6  0   7  0
   8  0   9  0  10  0  11  0  12  0  13  0  14  0  15  0
  16  0  17  0  18  0  19  0  20  0  21  0  22  0  23  0
  24  0  25  0  26  0  27  0  28  0  29  0  30  0  31  0
  32  0  33  0  34  0  35  0  36  0  37  0  38  0  39  0
  40  0  41  0  42  0  43  0  44  0  45  0  46  0  47  0
  48  0  49  0  50  0  51  0  52  0  53  0  54  0  55  0
  56  0  57  0  58  0  59  0  60  0  61  0  62  0  63  0
  64  0  65  0  66  0  67  0  68  0  69  0  70  0  71  0
  72  0  73  0  74  0  75  0  76  0  77  0  78  0  79  0
  80  0  81  0  82  0  83  0  84  0  85  0  86  0  87  0
  88  0  89  0  90  0  91  0  92  0  93  0  94  0  95  0
  96  0  97  0  98  0  99  0 100  0 101  0 102  0 103  0
 104  0 105  0 106  0 107  0 108  0 109  0 110  0 111  0
 112  0 113  0 114  0 115  0 116  0 117  0 118  0 119  0
 120  0 121  0 122  0 123  0 124  0 125  0 126  0 127  0
 128  0 129  0 130  0 131  0 132  0 133  0 134  0 135  0
 136  0 137  0 138  0 139  0 140  0 141  0 142  0 143  0
 144  0 145  0 146  0 147  0 148  0 149  0 150  0 151  0
 152  0 153  0 154  0 155  0 156  0 157  0 158  1 159  1
 160  1 161  1 162  1 163  1 164  1 165  1 166  1 167  1
 168  1 169  1 170  2 171  2 172  2 173  2 174  2 175  2
 176  2 177  2 178  2 179  2 180  2 181  2 182  2 183  2
 184  2 185  2 186  3 187  3 188  3 189  3 190  3 191  3
 192  3 193  3 194  3 195  3 196  3 197  3 198  3 199  3
 200  3 201  3 202  3 203  3 204  4 205  4 206  4 207  4
 208  4 209  4 210  4 211  4 212  4 213  4 214  4 215  4
 216  4 217  4 218  4 219  4 220  4 221  4 222  4 223  4
 224  4 225  4 226  5 227  5 228  5 229  5 230  5 231  5
 232  5 233  5 234  5 235  5 236  5 237  5 238  5 239  5
 240  5 241  5 242  5 243  5 244  5 245  5 246  5 247  5
 248  5 249  5 250  5 251  5 252  5 253  5 254  5
  }
  typevariable IndepentBrakeValues -array {
   0 30   1 30   2 30   3 30   4 30   5 30   6 30   7 30
   8 30   9 30  10 30  11 30  12 30  13 30  14 30  15 30
  16 30  17 30  18 30  19 30  20 30  21 30  22 30  23 30
  24 30  25 30  26 30  27 30  28 30  29 30  30 30  31 30
  32 30  33 30  34 30  35 30  36 30  37 30  38 30  39 30
  40 30  41 30  42 29  43 29  44 29  45 29  46 29  47 29
  48 28  49 28  50 28  51 28  52 28  53 28  54 27  55 27
  56 27  57 27  58 27  59 26  60 26  61 26  62 26  63 26
  64 26  65 25  66 25  67 25  68 25  69 25  70 25  71 24
  72 24  73 24  74 24  75 24  76 23  77 23  78 23  79 23
  80 23  81 23  82 22  83 22  84 22  85 22  86 22  87 22
  88 21  89 21  90 21  91 21  92 21  93 21  94 20  95 20
  96 20  97 20  98 20  99 19 100 19 101 19 102 19 103 19
 104 19 105 18 106 18 107 18 108 18 109 18 110 18 111 17
 112 17 113 17 114 17 115 17 116 16 117 16 118 16 119 16
 120 16 121 16 122 15 123 15 124 15 125 15 126 15 127 15
 128 14 129 14 130 14 131 14 132 14 133 13 134 13 135 13
 136 13 137 13 138 13 139 12 140 12 141 12 142 12 143 12
 144 12 145 11 146 11 147 11 148 11 149 11 150 11 151 10
 152 10 153 10 154 10 155 10 156  9 157  9 158  9 159  9
 160  9 161  9 162  8 163  8 164  8 165  8 166  8 167  8
 168  7 169  7 170  7 171  7 172  7 173  6 174  6 175  6
 176  6 177  6 178  6 179  5 180  5 181  5 182  5 183  5
 184  5 185  4 186  4 187  4 188  4 189  4 190  3 191  3
 192  3 193  3 194  3 195  3 196  2 197  2 198  2 199  2
 200  2 201  2 202  1 203  1 204  1 205  1 206  1 207  1
 208  0 209  0 210  0 211  0 212  0 213  0 214  0 215  0
 216  0 217  0 218  0 219  0 220  0 221  0 222  0 223  0
 224  0 225  0 226  0 227  0 228  0 229  0 230  0 231  0
 232  0 233  0 234  0 235  0 236  0 237  0 238  0 239  0
 240  0 241  0 242  0 243  0 244  0 245  0 246  0 247  0
 248  0 249  0 250  0 251  0 252  0 253  0 254  0
  }
  variable E_Stop 0
  method _rdeventhandler {status message} {

#    puts stderr "*** $self _rdeventhandler $status $message"
    if {($status / 100) == 2} {
      # Reverser lever moved?  Get its setting and save in Direction
      if {$CurrentSpeed == 0 &&
	  [regexp {REVERSER=([[:digit:]]+)} "$message" -> reverser] > 0} {
	if {$reverser < 64} {
	  set Direction 1
	} elseif {$reverser > 220} {
	  set Direction -1
	} elseif {$reverser < 128 && $reverser > 100} {
	  set Direction 0
	  set Throttle 0
	}
      }
      set Throttle 0
      # Throttle lever moved?  Fetch its value.
      if {[regexp {THROTTLE=([[:digit:]]+)} "$message" -> throttle] > 0} {
	if {$Direction != 0} {
	  set Throttle $ThrottleValues($throttle)
	}
      }
      set IndepentBrake 0
      # Indepent Brake lever moved?  Fetch its value.
      if {[regexp {INDEPENDBRK=([[:digit:]]+)} $message => ibrake] > 0} {
	set IndepentBrake $IndepentBrakeValues($ibrake)
      }
      if {[regexp {HEADLIGHT=([[:digit:]]+)} $message => headlight] > 0} {
	if {$headlight < 128} {
	  set headlight off
	} elseif {$headlight > 128} {
	  set headlight on
	}
      }
      # Check for Emergency Brake Down button (one of the bits in DIGITAL5).
      if {[regexp {DIGITAL5=\((.*)\)} "$message" -> d5] > 0} {
	# Emergency Brake Down button?
	if {[string first "Emergency Brake Down" "$d5"] >= 0} {
	  incr E_Stop
	}
      }
    }
    # E-Stop?  If so, arrange to exit.
    if {$E_Stop > 0} {
      $raildriver leds "000"
      $raildriver destroy
      set command "EmergencyStopALocomotive $options(-locoaddress)"
      $self queueInstruction $command
      $self queueInstruction %SHUTDOWN%
      return
    }
    # Apply throttle if reverser not in neutral.
    set Speed $CurrentSpeed
    if {$Direction != 0} {
      set Speed [expr {$CurrentSpeed + $Throttle}]
    }
    incr Speed -1;#	Entropy effect
    incr Speed -$IndepentBrake;# Brake application
    # Apply the governer (speed limit)
    if {$Speed > ($Throttle * 4)} {set Speed [expr {$Throttle * 4}]}
    if {$Speed > $MaximumSpeed} {set Speed $MaximumSpeed}
    # Avoid a negative speed
    if {$Speed < 0} {set Speed 0}
    if {$Speed != $CurrentSpeed} {
      set CurrentSpeed $Speed
      set command [list SetLocomotiveSpeedAndDirection $options(-locoaddress) S128]
      switch -- $Direction {
        -1 {lappend command Reverse}
        0 -
        1 {lappend command Forward}
      }
      lappend command $CurrentSpeed
      $self queueInstruction $command
    }
    if {$Headlight ne $headlight} {
      set Headlight $headlight
      set command [list SetLocomotiveFunctionsGroup1 $options(-locoaddress) $Headlight 0 0 0 0]
      $self queueInstruction $command
    }
  }
  method queueInstruction {command} {

#    puts stderr "*** $self queueInstruction $command"
    lappend InstructionQueue $command
    if {[llength $InstructionQueue] < 2} {
      after 1000 [mymethod _processResponse NO_RESPONSE_AVAILABLE NULL]
    }
  }
}

eval [list InertiaEntryThrottle %%AUTO%%] $::argv

vwait forever
