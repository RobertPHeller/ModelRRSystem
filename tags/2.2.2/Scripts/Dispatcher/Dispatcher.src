#* 
#* ------------------------------------------------------------------
#* Dispatcher.src - Boost version of Dispatcher
#* Created by Robert Heller on Tue Apr 28 09:09:25 2009
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id$

## @defgroup Dispatcher Dispatcher
# @brief Create and edit dispatcher or tower control panel programs.
#
# @section SYNOPSIS
#
# Dispatcher [X11 Resource Options] [options] [panel program files...]
#
# @section DESCRIPTION
#
# The Dispatcher program is used to create computerized CTC (Centralized
# Traffic Control) panels, to be used by dispatchers as part of a CATC
# (Computer Assisted Traffic Control) system to manage traffic flow for a
# model railroad.  A computerized CTC panel typically contains a track work
# schematic and a collection of control elements (such as switch plates,
# signal plates, toggle switches, push buttons, etc.) that control the
# track work and track side signals.  In addition to creating and editing
# CTC panels, the Dispatcher program can read in an XTrkCAD layout file
# and create a compressed graph (using the Boost library) of the track work 
# and this graph can be used as a guide while creating CTC panels.
#
#
# @section OPTIONS
#
# @arg -simplepanels Run in simplified mode.  Include the Azatrax library and
#       generates scripts to use Azatrax MRD2-U, SL2, or SR4 units to control 
#	switch machines directly from switch plates, with no signaling, 
#	occupency detection, etc.
# @arg -console Run with a console window.
# @arg -xtrkcad The next file is an XtrkCad file not a pannel file.
# @par
#
# @section PARAMETERS
#
# Zero or more panel program files.
#
# @section FILES
#
# <b>\$HOME</b>/.dispatcher (dispatcher.rc under MS-Windows) contains 
# personal program configuration information.  There are three configuration
# options:
# -# useExternalEditor Use External Editor, a boolean option. Default false.
# -# externalEditor The path of the External Editor. Default /usr/bin/emacs.
# -# tclkit The path of the Tcl Kit runtime file to use when wrapping\n
#	CTC panel programs. Default /usr/local/bin/tclkit.
#
# @section AUTHOR
# Robert Heller \<heller\@deepsoft.com\>


set argv0 [file join [file dirname [info nameofexecutable]] [file rootname [file tail [info script]]]]

package require Version
namespace export _*

namespace eval MRRSystem {variable MRR_LoadedVersion}
set MRRSystem::MRR_LoadedVersion [package require Mrr]

package require gettext
package require Tk
package require tile
package require snitStdMenuBar
package require HTMLHelp 2.0
package require snit
package require Splash
package require MainWindow
package require ReadConfiguration
package require LabelFrames
package require LayoutControlDB

lappend auto_path [file join [file dirname [file dirname [file dirname [info script]]]] \
                   CodeLibrary LCC]
#puts stderr "*** auto_path is $auto_path"
package require LCC
#puts stderr "*** packages loaded: "
#foreach p [package names] {
#    if {[catch {package present $p} version]} {continue}
#    puts stderr "***   $p $version"
#}

global ImageDir 
set ImageDir [file join [file dirname [file dirname [info script]]] \
			DispatcherLib]
global CommonImageDir 
set CommonImageDir [file join [file dirname [file dirname [info script]]] \
			Common]
global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Help]
set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
							[info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"

image create photo banner -file [file join $ImageDir banner.gif]
# Image used as a banner for all dialog boxes.
# [index] banner!image

image create photo DeepwoodsBanner -format gif -file [file join $CommonImageDir DeepwoodsBanner.gif]
# Deepwoods banner image.  Used in the splash screen.
# [index] DeepwoodsBanner!image

global argcTest IsSlave
set argcTest 0
set IsSlave 0
set CTCFiles {}
set HaveXTrkCADFile no
set XTrkCADFile {}
namespace eval Dispatcher {
  variable SimpleMode no
}

#tk_messageBox -type ok -icon info -message "*** argc = $argc, argv = $argv"

for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      incr argcTest
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -console {
	catch {console show}
    }
    -xtrkcad {
	set ia1 [expr {$ia + 1}]
	if {$HaveXTrkCADFile || $ia1 >= $argc} {
	  tk_messageBox -type ok -icon error -message  "usage: $argv0 \[wish options\] -- \[-isslave\] \[-console\] \[-xtrkcad xtrkcadfile\] [CTCWindowFile]"
	  exit 96
	} else {
	  set HaveXTrkCADFile yes
	  set XTrkCADFile "[lindex $argv $ia1]"
	  incr ia
	}	    
    }
    -simplepanels {
       set Dispatcher::SimpleMode yes
    }
    -psn* {
    }
    -* {
        tk_messageBox -type ok -icon error -message "usage: $argv0 \[wish options\] -- \[-isslave\] \[-console\] \[-simplepanels\] \[-xtrkcad xtrkcadfile\] \[CTCWindowFiles\]"
        exit 96
    }
    default {
      lappend CTCFiles "[lindex $argv $ia]"
    }
  }
}
if {$::tcl_platform(os) eq "Darwin"} {
    proc ::tk::mac::OpenDocument {files} {
        foreach f $files {
            if {[file extension "$f"] eq ".tcl"} {
                lappend CTCFiles "$f"
            } elseif {[file extension "$f"] eq ".xtc"} {
                set XTrkCADFile "$f"
            }
        }
    }
}



global HelpDir

proc Dispatcher::SplashScreen {} {
  # Build the ``Splash Screen'' -- A popup window that tells the user what 
  # we are all about.  It gives the version and brief copyright information.
  #
  # The upper part of the splash screen gives the brief information, with
  # directions on how to get detailed information.  The lower part contains
  # an image banner for Deepwoods Software.
  # [index] SplashScreen!procedure

  splash .mrrSplash \
	-title [_ "Model Railroad Dispatcher, Copyright (C) \
2006-2011 Robert Heller D/B/A Deepwoods Software Model Railroad Freight Car \
Forwarder comes with ABSOLUTELY NO WARRANTY; for details select \
'Warranty...' under the Help menu.  This is free software, and you are \
welcome to redistribute it under certain conditions; select 'Copying...' \
under the Help menu. Mrr Support Library version: \
%s. System patch level: %s." $MRRSystem::MRR_LoadedVersion \
$MRRSystem::SYSTEMVERSION] \
	-icon banner -image DeepwoodsBanner -background {#2ba2bf} \
	-titleforeground white -statusforeground {black}
}

namespace eval Dispatcher {variable CurrentProgress 0}
proc Dispatcher::SplashWorkMessage {message percent} {
  global IsSlave
  variable CurrentProgress
  incr CurrentProgress $percent
  if {$CurrentProgress > 100} {set CurrentProgress 100}
  if {!$IsSlave} {
    .mrrSplash update "$message" $CurrentProgress
    raise .mrrSplash
    update
  }
}

if {!$IsSlave} {
  Dispatcher::SplashScreen
  update
}

Dispatcher::SplashWorkMessage [_ "Building Main window"] 0

proc Dispatcher::MainWindow {} {
  global CommonImageDir
  global ImageDir
  variable WindowList {}

  wm protocol . WM_DELETE_WINDOW {Dispatcher::CarefulExit}
  if {!$::IsSlave} {wm withdraw .}
  wm title . [_ "Dispatcher, using %s of Mrr" [package versions Mrr]]

  variable FocusNowhere [canvas .focusNowhere]
  
  variable Main [mainwindow .main -dontwithdraw $::IsSlave \
                 -extramenus {"&Windows" {windows} {windows} 0 {}}]
  pack $Main -expand yes -fill both
  $Main toolbar add tools
  $Main toolbar show tools
  $Main menu entryconfigure file [_m "Menu|File|New"] \
        -command Dispatcher::NewCTCPanelWindow \
        -dynamichelp [_ "New CTC Panel Window"] \
        -label [_m "Menu|File|New CTC Panel Window"] \
        -underline 0 \
        -accelerator {Ctrl-N}
  image create photo NewButtonImage -file [file join $CommonImageDir new.gif]
  $Main toolbar addbutton tools new -image NewButtonImage \
	-command Dispatcher::NewCTCPanelWindow \
	-helptext "New CTC Panel Window" \
	-text [_m "Toolbar|New CTC Window"] -compound top
  $Main menu insert file [_m "Menu|File|Open..."] \
	command -label [_m "Menu|File|Load XtrkCAD Layout..."] \
	-dynamichelp [_ "Open and Load XTrkCad Layout File"] \
	-command Dispatcher::LoadLayout \
	-underline 0 \
	-accelerator {Ctrl-L}
  $Main menu insert file [_m "Menu|File|Open..."] \
	command -label [_m "Menu|File|Load Layout Control DB..."] \
	-dynamichelp [_ "Open and Load Layout Control DB"] \
	-command Dispatcher::LoadLayoutControlDB
  $Main menu insert file [_m "Menu|File|Open..."] \
	command -label [_m "Menu|File|Save Layout Control DB..."] \
	-dynamichelp [_ "Save Layout Control DB"] \
	-command Dispatcher::SaveLayoutControlDB
  $Main menu entryconfigure file [_m "Menu|File|Open..."] \
	-command Dispatcher::OpenCTCPanelWindow \
	-dynamichelp [_ "Open an existing CTC Panel Window file"] \
        -underline 0 \
	-accelerator {Ctrl-O}
  image create photo LoadButtonImage -file [file join $ImageDir load.gif]
  $Main toolbar addbutton tools load -image LoadButtonImage \
	-command Dispatcher::LoadLayout \
	-helptext [_ "Open and Load XTrkCad Layout File"] \
	-text [_m "Toolbar|Load XTrkCad File"] -compound top
  image create photo LoadDBButtonImage -file [file join $ImageDir loaddb.gif]
  $Main toolbar addbutton tools loaddb -image LoadDBButtonImage \
	-command Dispatcher::LoadLayoutControlDB \
	-helptext [_ "Open and Load Layout Control DB"] \
	-text [_m "Toolbar|Load Layout Control DB"] -compound top
  image create photo SaveDBButtonImage -file [file join $ImageDir savedb.gif]
  $Main toolbar addbutton tools savedb -image SaveDBButtonImage \
	-command Dispatcher::SaveLayoutControlDB \
	-helptext [_ "Save Layout Control DB"] \
	-text [_m "Toolbar|Save Layout Control DB"] -compound top
  image create photo OpenButtonImage -file [file join $CommonImageDir open.gif]
  $Main toolbar addbutton tools open -image OpenButtonImage \
	-command "CTCPanelWindow::CTCPanelWindow open -parent . -layoutcontroldb [TrackGraph::TrackGraph getLayoutControlDB]" \
	-helptext [_ "Open an existing CTC Panel Window file"] \
	-text [_m "Toolbar|Open CTC File"] -compound top
  $Main menu entryconfigure file [_m "Menu|File|Save As..."] -state disabled
  $Main menu entryconfigure file [_m "Menu|File|Close"] -command {Dispatcher::CarefulExit} \
		-accelerator {Ctrl-Q}
  $Main menu entryconfigure file [_m "Menu|File|Exit"] -command {Dispatcher::CarefulExit}
  variable MainWindow [$Main scrollwindow getframe]
  variable CanvasWindow [NodeGraphCanvas::NodeGraphCanvas $MainWindow.canvas -width 400 -height 400\
				-scrollregion {0 0 400 400}]
  $Main scrollwindow setwidget $CanvasWindow
  image create photo FindButtonImage -file [file join $ImageDir search.gif]
  $Main toolbar addbutton tools find -image FindButtonImage \
	-command "$CanvasWindow searchbyid"\
	-helptext [_ "Find a node by NID"] \
	-text [_m "Toolbar|Find Node"] -compound top
  $Main menu entryconfigure file [_m "Menu|File|Print..."] -command "$CanvasWindow print" \
	-dynamichelp [_ "Print Node Graph"] \
	-accelerator {Ctrl-P}
  $Main menu insert file Close command \
        -label [_m "Menu|File|Emit"] \
        -command "::Dispatcher::EmitLayout"
  
  image create photo PrintImage -file [file join $CommonImageDir print.gif]
  $Main toolbar addbutton tools print -image PrintImage \
	-command "$CanvasWindow print" \
	-helptext [_ "Print Node Graph"] \
	-text [_m "Toolbar|Print Node Graph"] -compound top

  $Main menu add options command \
	-label [_m "Menu|Options|Edit Configuration"] \
	-command "::Dispatcher::Configuration edit"

  $Main menu add options command \
	-label [_m "Menu|Options|Save Configuration"] \
	-command "::Dispatcher::Configuration save"

  $Main menu add options command \
	-label [_m "Menu|Options|Load Configuration"] \
	-command {::Dispatcher::Configuration load
                  WrapIt::SetTclkit [::Dispatcher::Configuration getoption tclkit]}
              
  $Main menu add view command \
        -label [_m "Menu|View|Layout Controls (from XtrkCAD)"] \
        -state disabled \
        -command "TrackGraph::TrackGraph ViewLayoutControls"
  $Main menu add view command \
        -label [_m "Menu|View|Layout Control DB"] \
        -command "TrackGraph::TrackGraph ViewLayoutControlDB"
  $Main menu add view command \
        -label [_m "Menu|View|Zoom In"] \
        -accelerator {+} \
        -command "$CanvasWindow zoomBy 2"
  set zoomMenu [menu [$Main mainframe getmenu view].zoom -tearoff no]
  $Main menu add view cascade \
        -label [_m "menu|View|Zoom"] \
        -menu $zoomMenu
  $Main menu add view command \
        -label [_m "Menu|View|Zoom Out"] \
        -accelerator {-} \
        -command "$CanvasWindow zoomBy .5"
  $zoomMenu add command -label {16:1} -command "$CanvasWindow setZoom 16"
  $zoomMenu add command -label {8:1} -command "$CanvasWindow setZoom 8"
  $zoomMenu add command -label {4:1} -command "$CanvasWindow setZoom 4"
  $zoomMenu add command -label {2:1} -command "$CanvasWindow setZoom 2"
  $zoomMenu add command -label {1:1} -command "$CanvasWindow setZoom 1"
  $zoomMenu add command -label {1:2} -command "$CanvasWindow setZoom .5"
  $zoomMenu add command -label {1:4} -command "$CanvasWindow setZoom .25"
  $zoomMenu add command -label {1:8} -command "$CanvasWindow setZoom .125"
  $zoomMenu add command -label {1:16} -command "$CanvasWindow setZoom .0625"
  
  $Main menu delete help [_m "Menu|Help|On Keys..."]
  $Main menu delete help [_m "Menu|Help|Index..."]
  $Main menu add help command \
	-label [_m "Menu|Help|Reference Manual"] \
	-command "HTMLHelp help {Dispatcher Reference}"
  $Main menu entryconfigure help [_m "Menu|Help|On Help..."] \
	-command "HTMLHelp help Help"
  $Main menu entryconfigure help [_m "Menu|Help|Tutorial..."] \
	-command "HTMLHelp help {Dispatcher Tutorial}"
  $Main menu entryconfigure help [_m "Menu|Help|On Version"] \
	-command "HTMLHelp help Version"
  $Main menu entryconfigure help [_m "Menu|Help|Copying"] \
	-command "HTMLHelp help Copying"
  $Main menu entryconfigure help [_m "Menu|Help|Warranty"] \
	-command "HTMLHelp help Warranty"
  if {$::tcl_platform(os) eq "Darwin"} {
      $Main menu add help command \
            -label [_m "Menu|Help|About"] \
            -command ::tk::mac::standardAboutPanel
  }
  HTMLHelp setDefaults "$::HelpDir" "index.html#toc"
}

proc Dispatcher::AddToWindows {window name} {
  variable Main
  variable WindowList  

  $Main menu add windows command -label "$name" -command "$window showme"
  lappend WindowList $window
}

proc Dispatcher::RemoveFromWindows {window name} {
  variable Main
  variable WindowList  

  $Main menu delete windows "$name" "$name"
  set index [lsearch -exact $WindowList $window]
  if {$index >= 0} {
      set WindowList [lreplace $index $index $WindowList]
  }
}



snit::macro Dispatcher::StdShell {dialogclass} {
  hulltype toplevel
  widgetclass $dialogclass

  component headerframe
  component iconimage
  component headerlabel
  component userframe
  component dismisbutton

#  option -title -default [_ "Dispatcher Dialog"] \
#		-configuremethod _SetTitle
  option -title -configuremethod _SetTitle
  option -style -default $dialogclass
  option -parent -default .
  method _SetTitle {option value} {
    wm title $win "$value"
    $headerlabel configure -text "$value"
    set options($option) "$value"
  }
  
  method _themeChanged {} {
    foreach option {-activebackground -activeforeground -anchor -background 
               -borderwidth -cursor -disabledforeground -foreground 
               -highlightbackground -highlightcolor -highlightthickness 
               -padx -pady -takefocus} {
      set value [ttk::style lookup $options(-style) $option]
      catch [list $win configure $option "$value"]    
      catch [list $iconimage configure $option "$value"]
      catch [list $headerlabel configure $option "$value"]
      catch [list $dismisbutton configure $option "$value"]
      catch [list $userframe configure $option "$value"]
    }
  }

  constructor {args} {
    wm withdraw $win
    install headerframe using ttk::frame $win.headerframe -relief ridge \
                    -borderwidth 5
    pack  $headerframe -fill x
    install iconimage using ttk::label $headerframe.iconimage -image banner
    pack  $iconimage -side left
    install headerlabel using ttk::label $headerframe.headerlabel -anchor w -font {Helvetica -24 bold}
    pack  $headerlabel -side right -anchor w -expand yes -fill x
    install userframe using ttk::frame $win.userframe \
                -borderwidth 0 -relief flat
    pack  $userframe -expand yes -fill both
    install dismisbutton using ttk::button $win.dismisbutton \
	-default active \
	-text [_m "Button|Dismis"] \
	-command [mymethod _Dismis]
    pack $dismisbutton -fill x
    if {[catch [list $self constructtopframe $userframe] message]} {
      puts stderr "*** ${self}::constructor: constructtopframe failed: $message"
    }
    $self configurelist $args
    wm transient $win [$self cget -parent]
    $type push availlist $self
    bind <Return> $win [list $dismisbutton invoke]
    bind <Esc> $win [list $dismisbutton invoke]
    wm protocol $win WM_DELETE_WINDOW [list $dismisbutton invoke]
    bind <<ThemeChanged>> $win [mymethod _themeChanged]
    $self _themeChanged
  }

  method _Dismis {} {
    wm withdraw $win
    $type remove inuselist $self
    $type push   availlist $self
  }

  method draw {args} {
    catch [concat $self initializetopframe $userframe $args] message
#    puts stderr "*** $self draw: $self initializetopframe returned: $message"
    update idle
    set x [expr {[winfo screenwidth $win]/2 - ([winfo reqwidth $win])/2 \
	    - [winfo vrootx $win]}]
    set y [expr {[winfo screenheight $win]/2 - [winfo reqheight $win]/2 \
	    - [winfo vrooty $win]}]
    if {$x < 0} {set x 0}
    if {$y < 0} {set y 0}
    wm geom $win +$x+$y
    wm transient $win [$self cget -parent]
    wm deiconify $win
    $type push inuselist $self
  }

  typemethod draw {args} {
    if {[$type length availlist] == 0} {
      $type create .[string tolower [lindex [split $type :] end]]%AUTO%
    }
    set object [$type pop availlist]
#    puts stderr "*** ${type}::typemethod draw: object = $object"
    eval [list $object draw] $args
    return $object
  }

  destructor {
    $type remove availlist $self
    $type remove inuselist $self
  }

  typevariable availlist {}
  typevariable inuselist {}

  typemethod _CheckList {list} {
    if {[lsearch -exact {availlist inuselist} $list] < 0} {
      error "No such list: $list"
    }
  }

  typemethod push {list object} {
    $type _CheckList $list
    if {![$type member $list $object]} {
      lappend $list $object
    }
  }

  typemethod pop {list} {
    $type _CheckList $list
    if {[$type length $list] > 0} {
#      puts stderr "*** ${type}::typemethod pop: list = $list ([set [set list]])"
      set object [lindex [set [set list]] 0]
#      puts stderr "*** ${type}::typemethod pop: object = $object"
      set $list  [lrange [set [set list]] 1 end]
#      puts stderr "*** ${type}::typemethod pop: list = $list ([set [set list]])"
    } else {
      set object {}
    }
    return $object
  }

  typemethod member {list object} {
    $type _CheckList $list 
    if {[lsearch -exact [set [set list]] $object] < 0} {
      return 0
    } else {
      return 1
    }
  }

  typemethod length {list} {
    $type _CheckList $list 
    return [llength [set [set list]]]
  }

  typemethod remove {list object} {
    $type _CheckList $list 
    set index [lsearch -exact [set [set list]] $object]
    if {$index < 0} {
      # nothing
    } elseif {$index == 0} {
      set $list [lrange [set [set list]] 1 end]
    } else {
      set $list [lreplace [set [set list]] $index $index]
    }
  }
}

package require NodeGraphCanvas

package require TrackGraph

proc Dispatcher::NewCTCPanelWindow {} {
    variable SimpleMode
    CTCPanelWindow::CTCPanelWindow new -parent . \
          -simplemode $Dispatcher::SimpleMode \
          -layoutcontroldb [TrackGraph::TrackGraph getLayoutControlDB]
}

proc Dispatcher::OpenCTCPanelWindow {} {
    CTCPanelWindow::CTCPanelWindow open -parent . \
          -layoutcontroldb [TrackGraph::TrackGraph getLayoutControlDB]
}


proc Dispatcher::LoadLayoutControlDB {{filename {}}} {
  if {[string length "$filename"]  == 0} {
    set filename [tk_getOpenFile -defaultextension .xml \
				 -filetypes {
				     {{XML Files} {.xml} TEXT}
				     {{All Files}     *      TEXT}
				  } \
				 -parent . -title "Layout Control DB file to open"]
  }
  if {[string length "$filename"]  == 0} {return}
  TrackGraph::TrackGraph LoadLayoutControlDB $filename
  variable WindowList
  foreach window $WindowList {
      catch {$window configure -layoutcontroldb [TrackGraph::TrackGraph getLayoutControlDB]}
  }
}

proc Dispatcher::SaveLayoutControlDB {} {
    TrackGraph::TrackGraph SaveLayoutControlDB
}
    

proc Dispatcher::LoadLayout {{filename {}}} {
  variable CanvasWindow
  variable Main

  if {[string length "$filename"]  == 0} {
    set filename [tk_getOpenFile -defaultextension .xtc \
				 -filetypes {
				     {{XTrkCad Files} {.xtc} TEXT}
				     {{All Files}     *      TEXT}
				  } \
				 -parent . -title "XTrkCad Layout file to open"]
  }
  if {[string length "$filename"]  == 0} {return}

  $CanvasWindow delete all

  variable WorkingAfterID [after 1000 Dispatcher::WorkingUpdate]
  SetBusy $Main on
  set errorP [catch {
    TrackGraph::TrackGraph ClearGraph
    $Main menu entryconfigure view [_m "Menu|View|Layout Controls (from XtrkCAD)"] \
          -state disabled
    TrackGraph::TrackGraph LoadLayout "$filename"
    close [file tempfile graphfile "/usr/tmp/GV.gv"]
    if {[NodeGraphCanvas::NodeGraphCanvas HaveGraphviz]} {
        TrackGraph::TrackGraph WriteGVFile $graphfile
        $CanvasWindow DotGraphLayout $graphfile
        file delete -force $graphfile
    } else {
        foreach edge [TrackGraph::TrackGraph PrimMinimumSpanningTree] {
            #puts stderr "*** Dispatcher::LoadLayout: edge = $edge"
            $CanvasWindow create edge [lindex $edge 0] [lindex $edge 1]
        }
        #puts stderr "*** Dispatcher::LoadLayout: TrackGraph::TrackGraph Roots = [TrackGraph::TrackGraph Roots]"
        #puts stderr "*** Dispatcher::LoadLayout: TrackGraph::TrackGraph Heads = [TrackGraph::TrackGraph Heads]"
        foreach head [TrackGraph::TrackGraph Heads] {
            #puts stderr "*** Dispatcher::LoadLayout (orphans): head = $head"
            #puts stderr "*** Dispatcher::LoadLayout (orphans): \[$head TypeOfNode\] = [$head TypeOfNode]"
            switch [$head TypeOfNode] {
                TrackGraph::Track -
                TrackGraph::Turnout -
                TrackGraph::Turntable {
                    if {![$CanvasWindow isdrawnp $head]} {
                        $CanvasWindow create orphannode $head
                    }
                }
            }
        }
        foreach head [TrackGraph::TrackGraph Heads] {
            #puts stderr "*** Dispatcher::LoadLayout: head = $head"
            #puts stderr "*** Dispatcher::LoadLayout: \[$head TypeOfNode\] = [$head TypeOfNode]"
            switch [$head TypeOfNode] {
                TrackGraph::Block {
                    $CanvasWindow create block $head
                }
                TrackGraph::SwitchMotor {
                    $CanvasWindow create switchmotor $head
                }
                TrackGraph::Signal {
                    $CanvasWindow create signal $head
                }
                TrackGraph::Sensor {
                    $CanvasWindow create sensor $head
                }
                TrackGraph::Control {
                    $CanvasWindow create control $head
                }
                default {
                }
            }
        }
    }
    if {[TrackGraph::TrackGraph HasControls]} {
        $Main menu entryconfigure view [_m "Menu|View|Layout Controls (from XtrkCAD)"] \
              -state normal
    }} errorMessage]
  SetBusy $Main off
  catch {after cancel $WorkingAfterID}
  set eInfo $::errorInfo
  set eCode $::errorCode
  if {$errorP} {
    error $errorMessage $eInfo $eCode
  }
  set xtrkcad [auto_execok xtrkcad[file extension [info nameofexecutable]]]
  if {[string length "$xtrkcad"] > 0 &&
      [tk_messageBox -type yesno -icon question \
	-message "Start XTrkCAD ($xtrkcad)?"]} {
    catch {exec "$xtrkcad" "$filename" &}
  }    
}

proc Dispatcher::EmitLayout {{filename {}}} {
    if {[string length "$filename"]  == 0} {
        set filename [tk_getSaveFile -defaultextension .out \
                      -filetypes {
                          {{Output Files} {.out} TEXT}
                          {{All Files}     *      TEXT}
                      } \
                      -parent . -title "Output file to emit layout to"]
        
    }
    if {[string length "$filename"]  == 0} {return}
    TrackGraph::TrackGraph Emit $filename
}

proc Dispatcher::WriteGVFile {{filename {}}} {
    if {[string length "$filename"]  == 0} {
        set filename [tk_getSaveFile -defaultextension .gv \
                      -filetypes {
                      {{Graphviz Files} {.gv} TEXT}
                      {{All Files}     *      TEXT}
                  } \
                        -parent . -title "Graphviz to write graph to"]
    }
    if {[string length "$filename"]  == 0} {return}
    TrackGraph::TrackGraph WriteGVFile $filename
}

package require CTCPanelWindow 1.1
package require WrapIt

Dispatcher::MainWindow


if {$::tcl_platform(os) eq "Darwin"} {
    proc ::tk::mac::OpenDocument {files} {
        #tk_messageBox -type ok -icon info -message "*** ::tk::mac::OpenDocument $files"
        foreach f $files {
            if {[file extension "$f"] eq ".tcl"} {
                CTCPanelWindow::CTCPanelWindow open -parent . -file "$f"
            } elseif {[file extension "$f"] eq ".xtc"} {
                Dispatcher::LoadLayout "$f"
            } else {
                tk_messageBox -type ok -icon error -message "Don't know how to open $f"
            }
        }
    }
    update idle
}    


proc Dispatcher::WorkingUpdate {} {
  update
  variable WorkingAfterID [after 1000 Dispatcher::WorkingUpdate]
}

proc Dispatcher::UnPostMenu {menu} {
#  global errorInfo
#  puts stderr "*** UnPostMenu: errorInfo = $errorInfo"
  catch {
    upvar #0 $menu data
    $menu unpost
    focus $data(oldfocus)      
  }
}

proc Dispatcher::PostMenuOnPointer {menu w} {
  set X [winfo pointerx $w]
  set Y [winfo pointery $w]

#  global errorInfo
#  puts stderr "*** PostMenuOnWidget: errorInfo = $errorInfo"
  $menu activate none
  $menu post $X $Y
  upvar #0 $menu data
  set data(oldfocus) [focus]
  focus $menu
}

proc Dispatcher::SetBusy {w flag} {
  variable FocusNowhere
  switch [string tolower "$flag"] {
    1 -
    on -
    yes {
	if {[string equal [grab current $w] $FocusNowhere]} {return}
	catch {array unset ::WatchList}
	SetWatchCursor [winfo toplevel $w]
	grab $FocusNowhere
    }
    0 -
    off -
    no {
	if {![string equal [grab current $w] $FocusNowhere]} {return}
	UnSetWatchCursor
	grab release $FocusNowhere
    }
  }
}

proc Dispatcher::SetWatchCursor {w} {
  variable WatchList
  if {![catch {$w cget -cursor} oldcursor] && [winfo ismapped $w]} {
    set WatchList($w) $oldcursor
    catch {$w configure -cursor watch}
  }
  foreach iw [winfo children $w] {
    SetWatchCursor $iw
  }
}

proc Dispatcher::UnSetWatchCursor {} {
  variable WatchList
  foreach w [array names WatchList] {
    catch {$w configure -cursor "$WatchList($w)"}
  }
}
	
proc Dispatcher::WIPStart {{message {}}} {
  variable Main
  $Main wipmessage configure -text "$message"
  $Main setprogress 0
  $Main setstatus {}
  SetBusy $::Main on
  update idle
}

proc Dispatcher::WIPUpdate {value {message {}}} {
  variable Main
  $Main setstatus "$message"
  $Main setprogress $value
  if {$value >= 100} {
    SetBusy $::Main off
  }
  update idle
}

proc Dispatcher::WIPDone {{message {}}} {
  WIPUpdate 100 "$message"
  update idle
}

proc Dispatcher::CarefulExit {{dontask no}} {
  if {$dontask} {
    set answer yes
  } else {
    set answer "[tk_messageBox -icon question -type yesno -message {Really Exit}]"
  }
  switch -exact $answer {
    no {return}
    yes {
	global IsSlave
	flush stderr
	if {$IsSlave} {
	  puts stdout "101 Exit"
	  flush stdout
	  set ans [gets stdin]
	}
	set dirtywindows {}
	foreach w [CTCPanelWindow::CTCPanelWindow allopenwindownames] {
	  set panel [CTCPanelWindow::CTCPanelWindow selectwindowbyname $w]
	  if {[$panel isdirtyp]} {
	    lappend dirtywindows $panel
	  }
	}
	if {[llength $dirtywindows] > 0} {
	  if {$dontask} {
	    set answer yes
	  } else {
	    set answer [tk_messageBox -icon question \
		       -type yesno \
		       -message {There are modified panels.  Save them?}]
	  }
	  if {$answer} {
	    foreach p $dirtywindows {$p save}
	  }
	}
	exit
    }
  }
}


namespace eval Dispatcher {
  global CommonImageDir

#  $Main buttons add -name quit -anchor w \
#			-text {Quit -- Exit NOW} -command Dispatcher::CarefulExit \
#			-underline 0 \
#			-helptext "Exit the program"
  bind Main <Q> "$Main buttons invoke quit"
  bind Main <q> "$Main buttons invoke quit"

  image create photo CloseButtonImage -file [file join $::CommonImageDir close.gif]
  $Main toolbar addbutton tools close -image CloseButtonImage \
	-command Dispatcher::CarefulExit \
	-helptext [_ "Close the application"] \
	-text [_m "Toolbar|Quit"] -compound top

  proc _AddBindTag {w tag} {
    if {[string equal [winfo class $w] Entry]} {return}
    if {[string equal [winfo class $w] Text]} {return}
    if {[string equal [winfo toplevel $w] $w] && ![string equal $w .]} {return}
    bindtags $w [linsert [bindtags $w] end $tag]
    foreach c [winfo children $w] {_AddBindTag $c $tag}
  }

  _AddBindTag . Main

  set ConfigurationBody [list ReadConfiguration::ConfigurationType \
      [list [_m "Label|Use External Editor"] useExternalEditor boolean false] \
      [list [_m "Label|External Editor"] externalEditor program /usr/bin/emacs {}] \
      [list [_m "Label|Tcl Kit"] tclkit program /usr/local/bin/tclkit {}] ]
  snit::type Configuration $ConfigurationBody


  Configuration load

  WrapIt::SetTclkit [Configuration getoption tclkit]

  update idle
  set extraX 0
  foreach s [$Main slideout list] {
    set rw [$Main slideout reqwidth $s]
    if {$rw > $extraX} {set extraX $rw}
  }


  if {!$::IsSlave} {$Main showit $extraX}
  
}

catch {Dispatcher::SplashWorkMessage [_ "Done"] 100}



if {$IsSlave} {
  fileevent stdin readable {
    if {[gets stdin line] < 0} {Dispatcher::CarefulExit yes}
    switch -- "$line" {
      {201 Exit} {Dispatcher::CarefulExit yes}
      default {}
    }
  }
}

if {$HaveXTrkCADFile} {Dispatcher::LoadLayout "$XTrkCADFile"}

foreach ctcfile $CTCFiles {
  CTCPanelWindow::CTCPanelWindow open -parent . -file "$ctcfile"
}


if {$::tcl_platform(os) eq "Darwin"} {
    proc ::tk::mac::ShowPreferences {} {
        ::Dispatcher::Configuration edit
    }
    #proc ::tk::mac::OpenApplication {} {
    #}
    proc ::tk::mac::ReopenApplication {} {
        if {[wm state .] eq "withdrawn"} {
            wm state . normal
        } else {
            wm deiconify .
        }
    }
    proc ::tk::mac::Quit {} {
        Dispatcher::CarefulExit
    }
    proc ::tk::mac::OnHide {} {
        Dispatcher::HideAllWindows
    }
    proc ::tk::mac::OnShow {} {
        Dispatcher::ShowAllWindows
    }
    
    proc ::tk::mac::ShowHelp {} {
        HTMLHelp help {Dispatcher Reference}
    }
    proc Dispatcher::HideAllWindows {} {
        variable Main
        variable WindowList
        
        foreach w $WindowList {
            wm withdraw $w
        }
        wm iconify .
    }
    proc Dispatcher::ShowAllWindows {} {
        variable Main
        variable WindowList
        
        foreach w $WindowList {
            $w showme
        }
        wm deiconify .
    }
}

        


