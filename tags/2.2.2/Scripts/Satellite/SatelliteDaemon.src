#**************************************************************************
#*
#*  System        : 
#*  Module        : 
#*  Object Name   : $RCSfile$
#*  Revision      : $Revision$
#*  Date          : $Date$
#*  Author        : $Author$
#*  Created By    : Robert Heller
#*  Created       : Thu Jun 11 11:38:28 2015
#*  Last Modified : <160816.1116>
#*
#*  Description	
#*
#*  Notes
#*
#*  History
#*	
#************************************************************************
#*
#*    Copyright (C) 2015  Robert Heller D/B/A Deepwoods Software
#*			51 Locke Hill Road
#*			Wendell, MA 01379-9728
#*
#*    This program is free software; you can redistribute it and/or modify
#*    it under the terms of the GNU General Public License as published by
#*    the Free Software Foundation; either version 2 of the License, or
#*    (at your option) any later version.
#*
#*    This program is distributed in the hope that it will be useful,
#*    but WITHOUT ANY WARRANTY; without even the implied warranty of
#*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*    GNU General Public License for more details.
#*
#*    You should have received a copy of the GNU General Public License
#*    along with this program; if not, write to the Free Software
#*    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#*
#* 
#*
#**************************************************************************

## @page SatelliteDaemon SatelliteDaemon
# @brief Satellite computer Daemon
#
# @section SatelliteDaemonSYNOPSIS SYNOPSIS
# @code
# SatelliteDaemon [-debug] [-port listenport] [-log logfilename] [-nodaemon] [-addpath path] [-addpackage path]
# SatelliteDaemon -extenddaemon newDaemon [-tclkit tclkit] packageDir ...
# @endcode
#
# @section SatelliteDaemonDESCRIPTION DESCRIPTION
#
# This is the deamon program that runs on 'satellite' computers on a network
# of computers controlling a layout.  These satellite computers could be 
# Raspberry Pis (running Rasperian) or small Intel/AMD systems (eg mini-Itx
# systems or other Intel/AMD SBCs running some version of Linux).  Somewhere
# on the network would be a (desktop) computer running the master (client) 
# package, typically in the context of a Dispatcher control panel.  
# The satellite systems would be connected to a collection of USB interface 
# boards (or possibly using the GPIO pins on a Raspberry) that would interface 
# to various actuating devices on the layout, such as turnout motors, signals, 
# uncoupling magnets, as well as various sensors that might be in use.
#
# The second form (SatelliteDaemon -extenddaemon newDaemon ...) of the command
# creates a new StarPak with the listed package dirs copied into the StarPak.
# The -tclkit defaults to /usr/local/bin/tclkit.
#
# @section SatelliteDaemonOPTIONS OPTIONS
#
# @arg -debug This option turns on verbose debug logging.
# @arg -port  This option selects the port to listen on (default: 40000).
# @arg -log   This option selects the name of the log filename (default: 
#             \$HOME/SatelliteDaemon.log).
# @arg -nodaemon This option supresses daemonisation to facilitate debugging.
# @arg -addpath This option adds additional search paths for packages.
#               (These packages are always available: the core Tcl packages,
#                snit, Azatrax, and Cmri.)
# @arg -addpackage This option loads additional packages into the daemon's 
#               internal virtual file system.
# @arg -extenddaemon This option creates a new version of the daemon with
#               additional package directories included. 
# @par
#
# @section SatelliteDaemonPROTOCOL PROTOCOL
#
# The protocol is simple.  The daemon creates a 'safe' interpreter and simply 
# feeds the command stream coming in to this interpreter and sends this 
# interpreter's output back to the master.
#
# @section SatelliteDaemonAUTHOR AUTHOR
# Robert Heller \<heller\@deepsoft.com\>
#


set argv0 [file join  [file dirname [info nameofexecutable]] SatelliteDaemon]

package require Sigterm                                                         
package require gettext
package require log
package require snit

set msgfiles [::msgcat::mcload [file join [file dirname [file dirname \
                                                         [file dirname \
                                                          [info script]]]] \
                                                         Messages]]
snit::type SatelliteDaemon {
    #** @brief This class implements the SatelliteDaemon server.
    #
    # The static members implement global initialization and the listener.
    # The class instances are client connections.
    #
    # @author Robert Heller \<heller\@deepsoft.com\>
    #

    typevariable activeServers
    #** @brief List of all active servers.
    #
    # This is used in the Event Loop to cycle
    # through all available client connections.
    typevariable additionalpaths {}
    #** @brief Additional package search paths.
    #
    # Thus is used to add additional places to search for packages.
    #
    typevariable listenSock
    #** @brief Listen socket.
    #
    # This is the socket we are listening for client
    # connections on.  Incoming connections are processed by the 
    # ListenerEvent() method which is called in the event loop.
    typevariable logchan
    #** @brief Logfile channel
    #
    # This channel is used for server logging
    #
    typevariable DEFAULTPORT 40000
    #** @brief Default port number to use.
    #
    # This is the default port number to listen on.
    #
    typevariable DEFAULTLOGFILE ~/SatelliteDaemon.log
    #** @brief Default logfile name.
    #
    #  This is the default log filename to use.
    #
    typemethod Initialize {args} {
	#** @brief Global static initialization.
	#
	# Creates the listener, process command line args.
	#   @param args Vector of command line args from main().
        #
        #   @author Robert Heller \<heller@deepsoft.com\>
        #
        set daemonize true
        set debugnotvis 1
        set listenport $DEFAULTPORT
        set logfilename $DEFAULTLOGFILE
        while {[llength $args] > 0} {
            switch -exact [lindex $args 0] {
                -debug {
                    set debugnotvis 0
                    set args [lrange $args 1 end]
                }
                -port {
                    if {[llength $args] < 2} {
                        error [_ "Port number missing!"]
                    }
                    set listenport [lindex $args 1]
                    set args [lrange $args 2 end]
                }
                -log {
                    if {[llength $args] < 2} {
                        error [_ "Log file missing!"]
                    }
                    set logfilename [lindex $args 1]
                    set args [lrange $args 2 end]
                }
                -nodaemon {
                    set daemonize false
                    set args [lrange $args 1 end]
                }
                -addpath {
                    if {[llength $args] < 2} {
                        error [_ "Path missing!"]
                    }
                    lappend additionalpaths [lindex $args 1]
                    set args [lrange $args 2 end]
                }
                -addpackage {
                    if {[llength $args] < 2} {
                        error [_ "Path missing!"]
                    }
                    $type addpackage [lindex $args 1]
                    set args [lrange $args 2 end]
                }
                -extenddaemon {
                    if {[llength $args] < 2} {
                        error [_ "Mising filename!"]
                    }
                    $type ExtendDaemon [lindex $args 1] [lrange $args 2 end]
                    exit
                }
                default {
                    error [_ "Unknow option: %s, should be one of -debug, -port, -log, -nodaemon, -addpath, -addpackage, or -extenddaemon" [lindex $args 0]]
                }
            }
        }
        if {$daemonize} {
            close stdin
            close stdout
            close stderr
            open /dev/null r
            open /dev/null w
        }
        set logchan [open $logfilename w]
        fconfigure $logchan  -buffering none
        ::log::lvChannelForall $logchan
        ::log::lvSuppress info 0
        ::log::lvSuppress notice 0
        ::log::lvSuppress debug $debugnotvis
        ::log::lvCmdForall [mytypemethod LogPuts]
        ::log::logMsg [_ "SatelliteDaemon starting on port %d" $listenport]
        if {[llength $additionalpaths] > 0} {
            ::log::logMsg [_ "SatelliteDaemon Added Paths: %s" $additionalpaths]
        }
        if {$debugnotvis == 0} {
            ::log::logMsg [_ "SatelliteDaemon debug logging is on"]
        }
        if {[catch {socket -server [list $type create %AUTO%] $listenport} listenSock]} {
            error [_ "Failed to open server socket %d: %s" $listenport $listenSock]
        }
        set activeServers {}
        set r [::sigterm_catch]
        ::log::log debug "*** $type Initialize: ::sigterm_catch returns $r"
        after 1000 [mytypemethod _pollSigterm]
    }
    typemethod _pollSigterm {} {
        #** @brief Poll for sigterm.
        #
        #   Shut everything down and cleanly exit.
        #
        ::log::log debug "*** $type _pollSigterm: ::sigterm_received: [::sigterm_received]"
        if {[::sigterm_received] > 0} {
	    ::log::log debug "*** $type _pollSigterm: sigterm_received returns > 0"
            set servers $activeServers
            foreach s $servers {
                ::log::log debug "*** $type _pollSigterm: s = $s"
                catch {$s destroy}
            }
            ::log::log debug "*** $type _pollSigterm: close $listenSock"
            catch {close $listenSock}
            ::log::log debug "*** $type _pollSigterm: unset listenSock"
            catch {unset listenSock}
            ::log::logMsg [_ "SatelliteDaemon stopping"]
            close $logchan
            exit
        } else {
            after 1000 [mytypemethod _pollSigterm]
        }
    }
    typemethod LogPuts {level message} {
        #** @brief Write log messages.
        #
        puts [::log::lv2channel $level] "[clock format [clock scan now] -format {%b %d %T}] \[[pid]\] $level $message"
    }
    
    component safe_interp
    #** @brief Safe Interpreter to use to evaluate Tcl statements.
    #
    # All of the statements that are executed on behalf of a client are 
    # executed in a client specific safe interperter.
    #
    variable socketfp
    #** @brief The socket file discriptor.
    #
    # This is what was returned by accept
    # when the connection was first created.  It is used to communicate
    # with the client process.  When the connection is shut down, this
    # file discriptor is closed and sockfd set to zero to indicate a
    # ``dead'' state.
    variable remoteaddress
    #** @brief Socket address.
    #
    # Holds the address of the client process.
    variable remoteport
    #** @brief Socket port.
    # 
    # Holds the port number of the client process.
    variable inputbuffer
    #** @brief Input statement buffer.
    #
    # This holds the current statement as it is built up.
    #
    constructor {sock address port} {
	#** @brief Constructor.
	# 
	# Gets the socket, socket address, and the port
	# number.  The socket and socket address
	# come from the accept call when the connection is made. Basic
	# initialization is performed and the server is added to the list
	# of live connections.
	#  @param sock The socket file discriptor from accept().
	#  @param address The socket address from accept().
	#  @param port The port number.
	#
	# @author Robert Heller \<heller\@deepsoft.com\>
	#
        set socketfp $sock
        set remoteaddress $address
        set remoteport $port
        # -- log the connection
        log::logMsg [_ "Connection from %s:%d accepted" $address $port]
        lappend activeServers $self
        ::safe::setLogCmd [mymethod safe_log]
        install safe_interp using ::safe::interpCreate "[namespace tail ${self}]_interp"
        foreach path $additionalpaths {
            ::safe::interpAddToAccessPath $safe_interp $path
        }
        interp alias $safe_interp open {} [myproc opentty] $safe_interp
        interp alias $safe_interp fconfigure {} [myproc fconfiguretty]  $safe_interp
        #parray ::tcl_platform
        ### This is needed for the Cmri package
        $safe_interp eval set ::tcl_platform(os) $::tcl_platform(os)
        set inputbuffer {}
        fileevent $socketfp readable [mymethod read_socket]
    }
    proc opentty {i args} {
        set istty no
        switch $::tcl_platform(os) {
            Linux {
                if {[string match {/dev/ttyS[0-9]*} [lindex $args 0]]} {
                    # Real RS232 port device
                    set istty yes
                } elseif {[string match {/dev/ttyUSB[0-9]*} [lindex $args 0]]} {
                    # USB RS232 port device
                    set istty yes
                } elseif {[string match {/dev/ttyACM[0-9]*} [lindex $args 0]]} {
                    # USB Serial model (Ardunio) device
                    set istty yes
                } elseif {[string match {/dev/ttyAMA[0-9]*} [lindex $args 0]]} {
                    # RPi serial port
                    set istty yes
                } else {
                    set istty no
                }
            }
            Windows {
                if {[string -nocase match {com[0-9]*:} [lindex $args 0]]} {
                    set istty yes
                } else {
                    set istty no
                }
            }
        }
        if {!$istty} {
            error "Not a tty: [lindex $args 0]!"
        }
        return [eval [linsert $args 0 interp invokehidden $i open]]
    }
    proc fconfiguretty {i args} {
        if {[catch {interp invokehidden $i fconfigure [lindex $args 0] -mode}]} {
            error "Not a tty: [lindex $args 0]!"
        }
        return [eval [linsert $args 0 interp invokehidden $i fconfigure]]
    }
    method safe_log {message} {
        #** @brief Log messages from the ::safe:: package.
        ::log::log debug [_ "*** SafeLog: (%s:%d): %s" $remoteaddress $remoteport $message]
    }
    method read_socket {} {
        #** @brief Readable event handler.  Read from the socket.
        while {true} {
            if {[catch {gets $socketfp linebuffer}]} {return}
            if {[eof $socketfp]} {
                $self destroy
                return
            } elseif {[fblocked $socketfp]} {
                break
            } else {
                if {$inputbuffer ne {}} {append inputbuffer "\n"}
                append inputbuffer $linebuffer
                if {[info complete $inputbuffer]} {
                    if {$inputbuffer eq "exit"} {
                        $self destroy
                        return
                    }
                    ::log::log debug "*** $self read_socket: inputbuffer is complete: \{$inputbuffer\}"
                    if {[catch {eval [list interp eval $safe_interp] $inputbuffer} result]} {
                        ::log::log debug "*** $self read_socket: error result is \{$result\}"
                        puts $socketfp [lindex [split $result "\n"] 0]
                    } else {
                        ::log::log debug "*** $self read_socket: result is \{$result\}"
                        puts $socketfp $result
                    }
                    flush $socketfp
                    set inputbuffer {}
                }
            }
        }
    }
    destructor {
	#** @brief Destructor.
	#
	# Clean things up and removes ourself from the list of
	# live connections.
        if {[catch {set remoteaddress} address]} {set address {}}
        if {[catch {set remoteport} port]} {set port -1}
        ::safe::interpDelete $safe_interp
        catch {fileevent $socketfp readable {}}
        catch {close $socketfp}
        catch {unset socketfp}
        set i [lsearch -exact $activeServers $self]
        if {$i == 0} {
            set activeServers [lrange $activeServers 1 end]
        } elseif {$i > 0} {
            set activeServers [lreplace $activeServers $i $i]
        }
        # -- log the disconnect
        ::log::logMsg [_ "Connection from %s:%d closed" $address $port]
    }
    typemethod ExtendDaemon {newDaemon pathlist} {
        #** @brief Create an extended Daemon starpack
        #
        
        set tclkit [from pathlist -tclkit /usr/local/bin/tclkit]
        set SrcDaemon [info nameofexe]
        set filename $newDaemon
        file copy $tclkit $filename
        if {![catch { package require Mk4tcl }]} {
            vfs::mk4::Mount $filename $filename
        } elseif {![catch { package require vlerq }]} {
            package require vfs::m2m 1.8
            vfs::m2m::Mount $filename $filename
        } else {
            error "Cannot find required packages (Mk4tcl or Vlerq)"
        }
        file copy $SrcDaemon/main.tcl [file join $filename main.tcl]
        foreach f [glob -nocomplain $SrcDaemon/lib/*] {
            set dest [file join $filename lib [file tail $f]]
            if {[file exists $dest]} {continue}
            file copy $f [file join $filename lib]
        }
        foreach dir $pathlist {
            if {[file isdirectory $dir]} {
                set dest [file join $filename lib [file tail $dir]]
                if {[file exists $dest]} {continue}
                file copy $dir [file join $filename lib]
            } else {
                error [_ "%s is not a directory!" $dir]
            }
        }
        vfs::unmount $filename
    }
    typemethod addpackage {dir} {
        #** Load a package into out VFS
        #
        
        set SrcDaemon [info nameofexe]
        if {[file isdirectory $dir]} {
            set dest [file join $SrcDaemon lib [file tail $dir]]
            if {[file exists $dest]} {return}
            file copy $dir [file join $SrcDaemon lib]
        } else {
            error [_ "%s is not a directory!" $dir]
        }
    }
}

eval [list SatelliteDaemon Initialize] $::argv
vwait forever

