#!=TCLSH=
#* 
#* ------------------------------------------------------------------
#* TTChart2TT2.src - Convert old format files to new format file.
#* Created by Robert Heller on Fri Dec 23 12:55:46 2005
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.3  2007/02/01 20:00:54  heller
#* Modification History: Lock down for Release 2.1.7
#* Modification History:
#* Modification History: Revision 1.2  2006/05/22 17:01:12  heller
#* Modification History: Updated make install
#* Modification History:
#* Modification History: Revision 1.1  2006/01/03 15:30:22  heller
#* Modification History: Lockdown
#* Modification History:
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

#* $Id$

package require gettext
package require Ttclasses
package require ReadOldTT


## @defgroup TTChart2TT2 TTChart2TT2
# @brief Convert TTChart files to TimeTable 2 files.
#
# @section SYNIPSIS
#
# TTChart2TT2 inputfile name outputfile
#
# @section DESCRIPTION
#
# This program converts the older V1 style time table chart files to the
# newer time table V2 files.
#
# @section PARAMETERS
# @arg inputfile The input file (time table chart file).
# @arg name The name for the new time table.
# @arg outputfile The output file to be created.
# @par
# @section AUTHOR
# Robert Heller \<heller\@deepsoft.com\>
#

set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"

global argv0 argv argc

proc Usage {} {
  global argv0
  puts stderr [_ "usage: %s inputfile name outputfile" $argv0]
}

if {$argc < 3} {
  Usage
  exit 99
}

if {[LoadCompleteChart "[lindex $argv 0]"]} {
  puts [_ "File loaded: %s" [lindex $argv 0]]
} else {
  puts [_ "File not loaded: %s" [lindex $argv 0]]
}

TimeTableSystem TimeTable -this [NewCreateTimeTable "[lindex $argv 1]" $TotalTime $TimeIncrement]

if {![catch [list array names CabColors] cnames]} {
  foreach cname $cnames {
    TimeTable AddCab "$cname" "$CabColors($cname)"
  }
}

proc StationDistanceComp {a b} {
# Procedure to compare the distances of two stations.
# <in> a -- one station.
# <in> b -- another station.
# [index] StationDistanceComp!procedure

  global Stations
  set comp [expr $Stations($a) - $Stations($b)]
  if {$comp < 0} {
    return -1
  } elseif {$comp > 0} {
    return 1
  } else {
    return 0
  }
}

foreach s [lsort -command StationDistanceComp [array names Stations]] {
  TimeTable AddStation "$s" $Stations($s)
}

foreach k [array names DuplicateTrackMap] {
  set e "$DuplicateTrackMap($k)"
  set kr [split "$k" =]
  set er [split "$e" =]
  for {set k1 0} {$k1 < [TimeTable NumberOfStations]} {incr k1} {
    if {[string equal "[lindex $kr 0]" "[TimeTable StationName $k1]"]} {break}
  }
  for {set e1 [expr [TimeTable NumberOfStations] - 1]} {$e1 >= 0} {incr e1 -1} {
    if {[string equal "[lindex $er 0]" "[TimeTable StationName $e1]"]} {break}
  }
  for {set kk $k1;set ee $e1} {$kk < [TimeTable NumberOfStations] && $ee >= 0} {incr kk;incr ee -1} {
    TimeTable SetDuplicateStationIndex $kk $ee
    TimeTable SetDuplicateStationIndex $ee $kk
    if {[string equal "[lindex $kr 1]" "[TimeTable StationName $kk]"]} {break}
    if {[string equal "[lindex $er 1]" "[TimeTable StationName $ee]"]} {break}
  }
}

foreach station [array names TrackList] {
  set stationIndex [TimeTable FindStationByName "$station"]
  if {$stationIndex < 0} {continue}
  foreach track "$TrackList($station)" {
    AddStorageTrack $stationIndex "$track"    
  }
}

foreach trainnum [array names Trains] {
  set trainrecord "$Trains($trainnum)"
  set header [lindex $trainrecord 0]
  set stops  [lrange $trainrecord 1 end]
  set name "[lindex $header 0]"
  set speed [lindex $header 1]
  set classnumber [lindex $header 2]
  set trainnotes [lindex $header 3]
  set rlen [TimeTable NumberOfStations]
  for {set start 0} {$start < $rlen} {incr start} {
    if {[string equal "[lindex [lindex $stops 0] 1]" "[TimeTable StationName $start]"]} {break}
  }
  for {set end [expr $start + 1]} {$end < $rlen} {incr end} {
    if {[string equal "[lindex [lindex $stops end] 1]" "[TimeTable StationName $end]"]} {break}
  }
  set depart [lindex [lindex $stops 0] 2]
  set train [TimeTable AddTrain "$name" "$trainnum" $speed $classnumber  $depart $start $end]
  foreach tn $trainnotes {
    Train_AddNoteToTrain $train $tn
  } 
  set istop 0
  foreach stop $stops {
#    puts stderr "*** stop = $stop"
    set arrival [lindex $stop 0]
    set station [lindex $stop 1]
    set depart  [lindex $stop 2]
    set cabname [lindex $stop 3]
    set notes   [lindex $stop 4]
#    puts stderr "*** arrival = $arrival, station = $station, depart = $depart, cabname = $cabname, notes = $notes"
    if {[llength $arrival] > 1 && [string equal "[lindex $arrival 0]" Origin]} {
      set OriginStorageTrack "[lindex $arrival 1]"
      if {![string equal "$OriginStorageTrack" {N/A}]} {
	Train_SetOriginStorageTrack $train "$OriginStorageTrack"
      }
    } elseif {[llength $depart] > 1 && [string equal "[lindex $depart 0]" Storage]} {
      set DestinationStorageTrack  "[lindex $depart 1]"
      if {![string equal "$DestinationStorageTrack" {N/A}]} {
	Train_SetDestinationStorageTrack $train "$DestinationStorageTrack"
      }
    } else {
      set layover [expr $depart - $arrival]
      Train_UpdateStopLayover $train $istop $layover
    }
    if {![string equal "$cabname" {}]} {
      set cab [TimeTable FindCab "$cabname"]
      if {[string equal "$cab" NULL]} {
	set cab [TimeTable AddCab "$cabname" "$cabname"]
      }
      Train_UpdateStopCab $train $istop $cab
    }
    foreach n $notes {
      Train_AddNoteToStop $train $istop $n
    }
    incr istop
  }
}

foreach element [array names StorageTrackMap] {
  if {[regexp {^([^+]+)\+([0-9]+),([0-9.]*)-([0-9.]*)$} "$element" whole station track Arrive Depart] < 1} {
    error "Internal error: time key malformed: $element"
  }
  if {[regexp {^([0-9-]*)>([0-9-]*)$} "$StorageTrackMap($element)" whole train1 train2] < 1} {
    error "Internal error: malformed data at $element: $StorageTrackMap($element)"
  }
  if {[string length "$Arrive"] == 0} {
    set Arrive [expr $Depart - 15]
  }    
  if {[string length "$Depart"] == 0} {
    set Depart [expr $Arrive + 15]
  }
  set station [TimeTable FindStationByName "$station"]
  if {$station >= 0} {
    set storageTrack [TimeTable FindStorageTrack $station "$track"]
    if {![string equal "$storageTrack" NULL]} {
      StorageTrack_StoreTrain $storageTrack $train1 $Arrive $Depart $train2
    }
  }
}

foreach note [lsort -integer [array names Notes]] {
  TimeTable AddNote "$Notes($note)"
}

TimeTable WriteNewTimeTableFile "[lindex $argv 2]"

TimeTableSystem oldtable -this [OldCreateTimeTable "[lindex $argv 2]"]



