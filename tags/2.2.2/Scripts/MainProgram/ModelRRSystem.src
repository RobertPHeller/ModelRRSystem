#* 
#* ------------------------------------------------------------------
#* ModelRRSystem.src - Main Program
#* Created by Robert Heller on Tue Apr 22 14:40:27 2008
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id$

set argv0 [file join [file dirname [info nameofexecutable]] [file rootname [file tail [info script]]]]

package require Version
namespace eval MRRSystem {variable MRR_LoadedVersion}
set MRRSystem::MRR_LoadedVersion [package require Mrr]

package require Tk
package require tile
package require snit
package require snitStdMenuBar
package require HTMLHelp 2.0
package require LabelFrames
package require Splash
package require MainWindow

#console show

global ImageDir 
set ImageDir [file join [file dirname [file dirname [info script]]] \
			ModelRRSystemLib]
global CommonImageDir 
set CommonImageDir [file join [file dirname [file dirname [info script]]] \
			Common]
global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Help]

image create photo banner -file [file join $ImageDir banner.gif]
# Image used as a banner for all dialog boxes.
# [index] banner!image

image create photo DeepwoodsBanner -format gif -file [file join $CommonImageDir DeepwoodsBanner.gif]
# Deepwoods banner image.  Used in the splash screen.
# [index] DeepwoodsBanner!image

wm withdraw .

namespace eval ModelRRSystem {}

proc ModelRRSystem::SplashScreen {} {
  # Build the ``Splash Screen'' -- A popup window that tells the user what 
  # we are all about.  It gives the version and brief copyright information.
  #
  # The upper part of the splash screen gives the brief information, with
  # directions on how to get detailed information.  The lower part contains
  # an image banner for Deepwoods Software.
  # [index] SplashScreen!procedure

  splash .mrrSplash \
	-title "Model Railroad ModelRRSystem, Copyright (C) \
2006-2007 Robert Heller D/B/A Deepwoods Software Model Railroad Freight Car \
Forwarder comes with ABSOLUTELY NO WARRANTY; for details select \
'Warranty...' under the Help menu.  This is free software, and you are \
welcome to redistribute it under certain conditions; select 'Copying...' \
under the Help menu. Mrr Support Library version: \
$MRRSystem::MRR_LoadedVersion. System patch level: \
$MRRSystem::SYSTEMVERSION." \
	-icon banner -image DeepwoodsBanner -background {#2ba2bf} \
	-titleforeground white -statusforeground {black}
}

namespace eval ModelRRSystem {variable CurrentProgress 0}
proc ModelRRSystem::SplashWorkMessage {message percent} {
  global IsSlave
  variable CurrentProgress
  incr CurrentProgress $percent
  if {$CurrentProgress > 100} {set CurrentProgress 100}
  .mrrSplash update "$message" $CurrentProgress
  update
}

ModelRRSystem::SplashScreen

catch {ModelRRSystem::SplashWorkMessage "Building Main window" 0}

proc ModelRRSystem::MainWindow {} {
  global CommonImageDir
  global ImageDir

  wm protocol . WM_DELETE_WINDOW {ModelRRSystem::CarefulExit}
  wm withdraw .
  wm title . "ModelRRSystem, using [package versions Mrr] of Mrr"

  variable FocusNowhere [canvas .focusNowhere]

  variable Main [mainwindow .main]
  pack $Main -expand yes -fill both
  $Main menu entryconfigure file New -state disabled
  $Main menu entryconfigure file Open... -state disabled
  $Main menu entryconfigure file {Save} -state disabled
  $Main menu entryconfigure file {Save As...} -state disabled
  $Main menu entryconfigure file {Print...} -state disabled
  $Main menu entryconfigure file Close -command {ModelRRSystem::CarefulExit} \
		-accelerator {Ctrl-Q}
  $Main menu entryconfigure file Exit -command {ModelRRSystem::CarefulExit}
  variable MainWindow [$Main scrollwindow getframe]
  $Main toolbar add tools
  $Main toolbar show tools
  variable IconFrame [IconFrame $MainWindow.iconFrame -width 300 -height 400 \
	-toolbaradd [list $Main toolbar addbutton tools]]
  $Main scrollwindow setwidget $IconFrame
  $Main menu insert file Close \
	command -label {Run Program} -command "$IconFrame runaprogram" \
	-dynamichelp "Run a program"
  set rl [$Main slideout add runlog]
  $Main slideout show runlog
  set rlsw [ScrolledWindow $rl.rlsw -scrollbar both -auto both]
  pack $rlsw -expand yes -fill both
  variable LogWindow [text [$rlsw getframe].logWindow -width 40 -wrap word]
  $rlsw setwidget $LogWindow
  $IconFrame configure -logtext $LogWindow
  $Main menu delete help "On Keys..."
  $Main menu delete help "Index..."
#  $Main menu add help command \
#	-label "Reference Manual" \
#	-command "HTMLHelp help {Main Program Reference Manual}
  $Main menu entryconfigure help "On Help..." \
	-command "HTMLHelp help Help"
#  $Main menu entryconfigure help "Tutorial..." \
#	-command "HTMLHelp help {Main Program Tutorial}"
  $Main menu entryconfigure help "On Version" \
	-command "HTMLHelp help Version"
  $Main menu entryconfigure help "Copying" \
	-command "HTMLHelp help Copying"
  $Main menu entryconfigure help "Warranty" \
	-command "HTMLHelp help Warranty"

  HTMLHelp setDefaults "$::HelpDir" "index.html#toc"
}
  

package require IconFrame


proc ModelRRSystem::CarefulExit {} {
  switch -exact "[tk_messageBox -icon question -type yesno -message {Really Exit}]" {
    no {return}
    yes {
	variable IconFrame
        $IconFrame killallprocesses
	exit
    }
  }
}



namespace eval ModelRRSystem {
  global CommonImageDir

  MainWindow

#  $Main buttons add -name quit -anchor w \
#			-text {Quit -- Exit NOW} -command ModelRRSystem::CarefulExit \
#			-underline 0 \
#			-helptext "Exit the program"
  bind Main <Q> "$Main buttons invoke quit"
  bind Main <q> "$Main buttons invoke quit"

  proc _AddBindTag {w tag} {
    if {[string equal [winfo class $w] Entry]} {return}
    if {[string equal [winfo class $w] Text]} {return}
    if {[string equal [winfo toplevel $w] $w] && ![string equal $w .]} {return}
    bindtags $w [linsert [bindtags $w] end $tag]
    foreach c [winfo children $w] {_AddBindTag $c $tag}
  }

  _AddBindTag . Main



  update idle
  set extraX 0
  foreach s [$Main slideout list] {
    set rw [$Main slideout reqwidth $s]
    if {$rw > $extraX} {set extraX $rw}
  }


  $Main showit $extraX
  
}

catch {ModelRRSystem::SplashWorkMessage {Done} 100}




