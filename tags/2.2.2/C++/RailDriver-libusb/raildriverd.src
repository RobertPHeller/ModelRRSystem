#* 
#* ------------------------------------------------------------------
#* raildriverd.src - Tcl coded Raildriver daemon
#* Created by Robert Heller on Sun Apr 29 16:08:33 2012
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2012  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

## @page raildriverd raildriverd
# @brief Raildriver USB Hotplug Daemon
#
# @section SYNOPSIS
# @code
# raildriverd [-debug] busnum devnum
# @endcode
#
# @section DESCRIPTION
#
# This is the deamon program for the Rail Driver.  It is started by the
# USB Hotplug code. See \ref HotplugScripts for details. It should not
# be started or stopped by hand!
#
# The API to use this deamon is described in <em>Model Railroad System
# Programming Guides</em>, Part I.  User programs connect to this deamon
# through a Tcp/Ip port.  It allows multiple programs to access a single
# Raildriver device.  These programs can then in turn implement various
# functionallity for the various levers, knobs, switches, and buttons on the
# Raildriver device.
#
# @section OPTIONS
#
# @arg -debug This option turns on verbose debug logging.
# @par
#
# @section PARAMETERS
#
# @arg busnum This is the USB bus number the device is connected to.
# @arg devnum This is the USB device number the device is connected to.
# @par
#
# @section HotplugScripts Hotplugging scripts and setup.
#
# There are two ways to set up auto starting of this daemon.
#
#  -# Using the Hotplug daemon.
#     Copy the raildriverd.hotplug script to /etc/hotplug/usb/ as raildriverd
#	Use the print-usb-usermap stript to append a line to
#	/etc/hotplug/usb.usermap.
#  -# Using udev.
#     Copy 90-raildriver.rules to /etc/udev/rules.d/ and copy
#	raildriverd.udev to /lib/udev/ as raildriverd
#
#
# @section AUTHOR
# Robert Heller \<heller\@deepsoft.com\>
#

set argv0 [file join  [file dirname [info nameofexecutable]] raildriverd]

package require Raildriverio
package require Sigterm

package require gettext
package require log
package require snit

set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
							[info script]]]] Messages]]
snit::type RaildriverServer {
#** @brief This class implements the Raildriver Server.
#
# The static members implement
# global initialization, the listener, event loop, and global signal handler.
# The class instances are client connections.
#
# @author Robert Heller \<heller\@deepsoft.com\>
#
	typecomponent RailDriver
	#** @brief Raildriver object.
	#
	# This is the class instance of the Raildriver
	# class that connects us to the Raildriver console that we were
	# started to serve.
	typevariable listenSock
	#** @brief Listen socket.
	#
	# This is the socket we are listening for client
	# connections on.  Incoming connections are processed by the 
	# ListenerEvent() method which is called in the event loop.
	typevariable activeServers
	#** @brief List of all active servers.
	#
	# This is used in the Event Loop to cycle
	# through all available client connections.
	typevariable pidfilename;
	#** @brief Pid filename
	#
	# The name of the Pid filename
	typevariable logchan
	#** @brief Logfile channel
	#
	typevariable BASEPORT 41000
	#**
	# Base port to listen on
        typevariable LIBUSB_ERROR_IO -1
        typevariable LIBUSB_ERROR_INVALID_PARAM -2
        typevariable LIBUSB_ERROR_ACCESS -3
        typevariable LIBUSB_ERROR_NO_DEVICE -4
        typevariable LIBUSB_ERROR_NOT_FOUND -5
        typevariable LIBUSB_ERROR_BUSY -6
        typevariable LIBUSB_ERROR_TIMEOUT -7
        typevariable LIBUSB_ERROR_OVERFLOW -8
        typevariable LIBUSB_ERROR_PIPE -9
        typevariable LIBUSB_ERROR_INTERRUPTED -10
        typevariable LIBUSB_ERROR_NO_MEM -11
        typevariable LIBUSB_ERROR_NOT_SUPPORTED -12
        typevariable LIBUSB_ERROR_OTHER -99
	typevariable allMasks
	typevariable allCodes {REVERSER THROTTLE AUTOBRAKE INDEPENDBRK BAILOFF 
				WIPER HEADLIGHT DIGITAL1 DIGITAL2 DIGITAL3 
				DIGITAL4 DIGITAL5 DIGITAL6}
	typevariable maxwrite 4096
	typeconstructor {
	  set allMasks [list $::RaildriverIO_REVERSER_M \
				    $::RaildriverIO_THROTTLE_M \
				    $::RaildriverIO_AUTOBRAKE_M \
				    $::RaildriverIO_INDEPENDBRK_M \
				    $::RaildriverIO_BAILOFF_M \
				    $::RaildriverIO_WIPER_M \
				    $::RaildriverIO_HEADLIGHT_M \
				    $::RaildriverIO_DIGITAL1_M \
				    $::RaildriverIO_DIGITAL2_M \
				    $::RaildriverIO_DIGITAL3_M \
				    $::RaildriverIO_DIGITAL4_M \
				    $::RaildriverIO_DIGITAL5_M \
				    $::RaildriverIO_DIGITAL6_M]
	}
	variable sockfd
	#** @brief The socket file discriptor.
	#
	# This is what was returned by accept
	# when the connection was first created.  It is used to communicate
	# with the client process.  When the connection is shut down, this
	# file discriptor is closed and sockfd set to zero to indicate a
	# ``dead'' state.  The Event Loop procedure looks for dead server
	# connections and reaps them.
	variable remotesockaddr
	#** @brief Socket address.
	#
	# Holds the address of the client process.
	variable remoteport
	#** @brief Socket port.
	# 
	# Holds the port number of the client process.
	variable event_mask
	#** @brief Our event mask.
	#
	# These are the events we are listening for.
	constructor {sock address port} {
	#** @brief Constructor.
	# 
	# Gets the socket, socket address, and the port
	# number.  The socket and socket address
	# come from the accept call when the connection is made. Basic
	# initialization is performed and the server is added to the list
	# of live connections.
	#  @param sock The socket file discriptor from accept().
	#  @param address The socket address from accept().
	#  @param port The port number.
	#
	# @author Robert Heller \<heller\@deepsoft.com\>
	#
	  set sockfd $sock
	  set remotesockaddr $address
	  set remoteport $port
	  fconfigure $sockfd -blocking 0 -buffering line
	  set event_mask $::RaildriverIO_NONE_M
	  # -- log the connection
	  log::logMsg [_ "Connection from %s:%d accepted" $address $port]
	  lappend activeServers $self
	  fileevent $sockfd readable [mymethod CheckEvent]
	}
	destructor {
	#** @brief Destructor.
	#
	# Clean things up and removes ourself from the list of
	# live connections.
	  if {[catch {set remotesockaddr} address]} {set address {}}
	  if {[catch {set remoteport} port]} {set port -1}
	  catch {fileevent $sockfd readable {}}
	  catch {close $sockfd}
	  catch {unset sockfd}
	  set i [lsearch -exact $activeServers $self]
	  if {$i == 0} {
	    set activeServers [lrange $activeServers 1 end]
	  } else {
	    set activeServers [lreplace $activeServers $i $i]
	  }
	  # -- log the disconnect
	  ::log::logMsg [_ "Connection from %s:%d closed" $address $port]
	}
	method GetMask {} {
	#** Return our event mask.  This is the mask of events we are listening
	# for.
	    return $event_mask
	}
	typemethod Initialize {args} {
	#** @brief Global static initialization.
	#
	# Creates the listener, create a
	# common RaildriverIO object for the Raildriver console that the
	# Hotplug system detected and which caused the daemon to be started.
	#   @param args Vector of command line args from main().
        #
	  if {[llength $args] > 0 && [lindex $args 0] eq "-debug"} {
	    set debugnotvis 0
	    set args [lrange $args 1 end]
	  } else {
	    set debugnotvis 1
	  }
	  if {[llength $args] > 1} {
	    foreach {Xbusnum Xdevnum} $args {break}
	    scan $Xbusnum {%03d} busnum
	    scan $Xdevnum {%03d} devnum
          } else {
            set busnum 0
            set devnum 0
	  }

	  set logfilename [format {/var/log/%s-%03d-%03d.log} [file tail $::argv0] $busnum $devnum]
	  close stdin
	  close stdout
	  close stderr
	  open /dev/null r
	  open /dev/null w
	  set logchan [open $logfilename w]
	  fconfigure $logchan  -buffering none

	  ::log::lvChannelForall $logchan
	  ::log::lvSuppress info 0
	  ::log::lvSuppress notice 0
	  ::log::lvSuppress debug $debugnotvis
	  ::log::lvCmdForall [mytypemethod LogPuts]

	  ::log::logMsg [_ "raildriverd starting"]
	  for {set p $BASEPORT} {true} {incr p 10} {
	    ::log::log debug "*** $type Initialize: p = $p"
	    if {![catch {socket -server [mytypemethod NewConnection] -myaddr 127.0.0.1 $p} listenSock]} {
	      ::log::log debug "*** $type Initialize (break): p = $p"
	      break
	    }
          }
          ::log::logMsg [format [_ "listening on port %d."] $p]
	  set RailDriver [::new_RaildriverIO $busnum $devnum]
	  ::log::log debug "*** $type Initialize: RailDriver = $RailDriver"
	  set pidfilename [format {/var/run/%s-%03d-%03d.pid} [file tail $::argv0] $busnum $devnum]
	  set activeServers {}
	  catch {
		set fp [open $pidfilename w]
		puts $fp [pid]
		close $fp
	  }
	  set r [::sigterm_catch]
	  ::log::log debug "*** $type Initialize: ::sigterm_catch returns $r"
	  after 100 [mytypemethod PollRailDriver]
	}
	typemethod NewConnection {sock address port} {
	#** @brief Handle a new connection.
	#
	# Creates a new instance to handle the traffic on this new connection
	#
	  $type create %%AUTO%% $sock $address $port
	}
	typemethod PollRailDriver {} {
	#** @brief Poll raildriver inputs.
	#
	  ::log::log debug "*** $type PollRailDriver: ::sigterm_received: [::sigterm_received]"
	  if {[::sigterm_received] > 0} {
	    ::log::log debug "*** $type PollRailDriver: sigterm_received returns > 0"
	    $type _Shutdown
	  } elseif {[$RailDriver ReadInputs mask status]} {
	    ::log::log debug "*** $type PollRailDriver: (ReadInputs returns true) mask = $mask, status = $status"
	    foreach s $activeServers {
	      set clientmask [$s GetMask]
	      set sendmask [expr {$clientmask & $mask}]
	      if {$sendmask != $::RaildriverIO_NONE_M} {
		$s SendEventData $sendmask
	      }
	    }
	  } elseif {$status == $LIBUSB_ERROR_NO_DEVICE} {
	    ::log::log debug "*** $type PollRailDriver: status is LIBUSB_ERROR_NO_DEVICE"
	    $type _Shutdown
	  }
	  ::log::log debug "*** $type PollRailDriver: (ReadInputs returns false) status = $status"
	  after 100 [mytypemethod PollRailDriver]
	}	    
	typemethod _Shutdown {} {
	#** @brief Global _Shutdown.
	#
	# Shutdown all server connections, dismis the
	# common RaildriverIO object and generally perform process rundown.
	  ::log::log debug "*** $type _Shutdown"
	  set servers $activeServers
	  foreach s $servers {
	    ::log::log debug "*** $type _Shutdown: s = $s"
	    catch {$s destroy}
	  }
	  ::log::log debug "*** $type _Shutdown: close $listenSock"
	  catch {close $listenSock}
	  ::log::log debug "*** $type _Shutdown: unset listenSock"
	  catch {unset $listenSock}
	  ::log::log debug "*** $type _Shutdown: $RailDriver destroy"
	  catch {$RailDriver destroy}
	  ::log::log debug "*** $type _Shutdown: unset RailDriver"
	  catch {unset RailDriver}
	  ::log::log debug "*** $type _Shutdown: file delete $pidfilename"
	  catch {file delete $pidfilename}
	  ::log::logMsg [_ "raildriverd stopping"]
	  close $logchan
	  exit
	}
	typemethod LogPuts {level message} {
	  puts [::log::lv2channel $level] "[clock format [clock scan now] -format {%b %d %T}] \[[pid]\] $level $message"
	}
	method ErrFormat {format args} {
	#** @brief Error function.
	#
	# Used to report parse errors.  The message is
	# formatted and sent to the client.  It is presumbed that the message
	# starts with ``5xx '', as this method does not prefix the message
	# with a three digit response code.
	#  @param format The format string.
	  set message [eval [list format $format] $args]
	  puts $sockfd $message
	}
	method DoExit {} {
	#** @brief Exit function.
	#
	# Sends a ``299 GOODBYE'' message to the client and
	# closes the connection.  The socket is closed and the socket 
	# channel set to zero.  Later, the class instance will get reaped
	# (garbage collected).
	  puts $sockfd "299 GOODBYE"
	  $self destroy
	}
	method ClearMask {} {
	#**  @brief Clear Mask function.
	# 
	# Clears the event mask and sends a
	# ``201 OK'' message to the client.  With a clear event mask, no
	# ``202 Events:'' messages will be sent, unless a POLLVALUES command
	# is issued or a MASK command is sent (to add bits to the event
	# mask).
	  set event_mask $::RaildriverIO_NONE_M
	  puts $sockfd "201 OK"
        }
	method AddMask {mask} {
	#** @brief  Add Mask function.
	#
	# Adds bits to the event mask and sends a
	# ``201 OK'' message to the client.  When the event mask is not
	# zero, the server will send periodic messages about changed events
	# (state of the Raildriver console), but only for the events selected
	# by the event mask.
	#  @param mask Mask of bits to add to the event mask.
	  set event_mask [expr {$event_mask | $mask}]
	  puts $sockfd "201 OK"
	}
	method PollValues {mask} {
	#** @brief Poll Values functions.
	#
	# Reads the current Rail Driver state and
	# calls SendEventData(), sending a ``202 Events:'' message to the 
	# client. See SendEventData. All of the
	# selected events are sent, even if they have not changed.
	#  @param mask Mask of bits to poll.
	  $self SendEventData $mask
	}
	method LedDisplay {ledstring} {
	#** @brief Led Display function.
	#
	# Sends digits to the speedometer LEDS and
	# sends a ``201 OK'' message to the client. The contents of the LED
	# display are updated based on the passed string, which can contain
	# the digits 0-9, dashes, underscores (which represent blanks), and
	# periods (embeded decimal points).  The display is a seven segement
	# display.
	#  @param ledstring String to display.  Can contain upto 3 digits,
	#	dashes, underbars, plus decimal points.
	  $RailDriver SetLEDS $ledstring
	  puts $sockfd "201 OK"
	}
	method SpeakerOn {} {
	#** @brief Speaker on function.  
	#
	# Turns the speaker in the Rail Driver on and
	# sends a ``201 OK'' message to the client.  This is just a speaker
	# built into the RailDriver which can be turned on or off.
	  $RailDriver SpeakerOn
	  puts $sockfd "201 OK"
	}
	method SpeakerOff {} {
	#** @brief Speaker off function.
	#
	# Turns the speaker in the Rail Driver off and
	# sends a ``201 OK'' message to the client.This is just a speaker
	# built into the RailDriver which can be turned on or off.
	  $RailDriver SpeakerOff
	  puts $sockfd "201 OK"
	}
	method CheckEvent {} {
	#** @brief Client event checker.
	#
	# Check for a message from our client and if
	# there is a message from our client, parse it and process it and
	# then send back to the client one (or more) messages:
	#
	# Error messages (parse errors from the parser):
	#
	# 502 Parse error
	#
	# 503 message
	#
	# 504 message: object 'object'
	#
	# Acknowledgement message (most action commands):
	#
	# 201 OK
	#
	# Data message in response to a POLLVALUES command:
	#
	# 202 Events: key=val,key=val,...
	#
	# @sa SendEventData
	#
	# Close down message in response to an EXIT command:
	#
	# 299 GOODBYE
	  while {true} {
	    if {[catch {gets $sockfd linebuffer}]} {return}
	    if {[eof $sockfd]} {
	      catch {close $sockfd}
	      catch {unset sockfd}
	      return false
	    } elseif {[fblocked $sockfd]} {
	      break
	    } else {
	      ::log::log debug "*** $self CheckEvent: top of loop: linebuffer is $linebuffer"
	      if {[regexp -nocase {^(exit|clear|mask|pollvalues|led|speaker)[[:space:]]*} $linebuffer -> command] > 0} {
		set command [string toupper $command]
		::log::log debug "*** $self CheckEvent: command is $command"
		switch $command {
		  EXIT {
			$self DoExit
		  }
		  CLEAR {
			$self ClearMask
		  }
		  MASK {
			regexp -nocase {^mask[[:space:]]*(.*)$} $linebuffer -> maskbits
			set error no
			set themask $::RaildriverIO_NONE_M
			foreach name $maskbits {
			  set name [string toupper $name]
			  if {![catch {set ::RaildriverIO_${name}_M} mbit]} {
			    set themask [expr {$themask | $mbit}]
			  } else {
			    $self ErrFormat "504 Unknown mask bit: %s" $name
			    set error yes
			    break
			  }
			}
			if {!$error} {$self AddMask $themask}
		  }
		  POLLVALUES {
			::log::log debug "*** $self CheckEvent: POLLVALUES arm of switch"
			regexp -nocase {^pollvalues[[:space:]]*(.*)$} $linebuffer -> maskbits
			::log::log debug "*** $self CheckEvent: maskbits is $maskbits" 
			set error no
			set themask $::RaildriverIO_NONE_M
			foreach name $maskbits {
			  set name [string toupper $name]
			  if {![catch {set ::RaildriverIO_${name}_M} mbit]} {
			    set themask [expr {$themask | $mbit}]
			  } else {
			    $self ErrFormat "504 Unknown mask bit: %s" $name
			    set error yes
			    break
			  }
			}
			if {!$error} {$self PollValues $themask}
		  }
		  LED {
		    if {[regexp -nocase {^led[[:space:]]*([[:digit:]_-][[:digit:]_.-]*)$} $linebuffer -> leddigits] > 0} {
		      $self LedDisplay $leddigits
		    } else {
		      $self ErrFormat "503 Illegal Led Digit Characters"
		    }
		  }
		  SPEAKER {
		    if {[regexp -nocase {^speaker[[:space:]]*(on|off)$} $linebuffer -> onoff] > 0} {
		      switch [string toupper onoff] {
			ON {$self SpeakerOn}
			OFF {$self SpeakerOff}
		      }
		    } else {
		      $self ErrFormat "503 Illegal Speaker command"
		    }
		  }
		}
	      } else {
		$self ErrFormat "504 Illegal command: %s" $linebuffer
	      }
	    }
	  }
	}
	method SendEventData {sendmask} {
	#** @brief Send Event Data.
	#
	# One line of data is sent to the client,
	# formatted like this:
	#
	# 202 Events: key=val,key=val,...
	#
	# Where key is one of: REVERSER, THROTTLE, AUTOBRAKE, INDEPENDBRK,
	# BAILOFF, HEADLIGHT, WIPER, DIGITAL1, DIGITAL2, DIGITAL3, DIGITAL4,
	# DIGITAL5, or DIGITAL6.  And val is either a small decimal number
	# (in the range of 0 to 255) or a list of button or switch names
	# enclosed in parenthisises.  Only the events specified by the
	# supplied mask are sent.
	#
	# REVERSER is the state of the reverser lever, values (much) less
	# than 128 are forward, a value at or near 128 is neutral and values
	# (much) greater than 128 are reverse.
	#
	# THROTTLE is the state of the Throttle (and dynamic brake).  Values
	# (much) greater than 128 are for throttle (maximum throttle is are
	# values close to 255), values near 128 are at the center position
	# (idle/coasting), and values (much) less than 128 are for dynamic
	# braking, with values aproaching 0 for full dynamic braking.
	#
	# AUTOBRAKE is the state of the Automatic (trainline) brake.  Large
	# values for no braking, small values for more braking.
	#
	# INDEPENDBRK is the state of the Independent (engine only) brake.
	# Like the Automatic brake: large values for no braking, small
	# values for more braking.
	#
	# BAILOFF is the Independent brake 'bailoff', this is the spring
	# loaded right movement of the Independent brake lever.  Larger
	# values mean the lever has been shifted right.
	#
	# HEADLIGHT is the state of the headlight switch.  A value below 128
	# is off, a value near 128 is dim, and a number much larger than 128
	# is full. This is an analog input w/detents, not a switch!
	#
	# WIPER is the state of the wiper switch.  Much like the headlight
	# switch, this is also an analog input w/detents, not a switch!
	# Small values (much less than 128) are off, values near 128 are
	# slow, and larger values are full.
	#
	# DIGITAL1 is the leftmost eight blue buttons in the top row, BB1,
	# BB2 BB3, BB4, BB5, BB6, BB7, and BB8.
	#
	# DIGITAL2 is the rightmost six blue buttons in the top row and the
	# leftmost two buttons in the bottom row, BB9, BB10, BB11, BB12,
	# BB13, BB14, BB15, and BB16.
	#
	# DIGITAL3 is the eight buttons on the bottom row, starting with the
	# third from the left, BB17, BB18, BB19, BB20, BB21, BB22, BB23, and
	# BB24. 
	#
	# DIGITAL4 is the rightmost four buttons on the bottom row, plus the
	# zoom up and zoom down, plus the pan right and pan up buttons, named
	# BB25, BB26, BB27, BB28, Zoom Up, Zoom Down, Pan Right, and Pan Up.
	#
	# DIGITAL5 is the pan left and pan down, range up and range down, and
	# E-Stop up and E-Stop down switches, named Pan Left, Pan Down,
	# Range Up, Range Down, Emergency Brake Up, Emergency Brake Down.
	#
	# DIGITAL6 is the whistle up and whistle down, Alert, Sand, P
	# (Pantograph), and Bell buttons, named Whistle Up, Whistle Down,
	# Alert, Sand, Pantograph, and Bell.
	#
	#  @param sendmask A mask of events to send event data about.  Only
	#                  data for the matching events will be sent.
	#	
	  set writebuffer "202 Events: "
	  set comma {}
	  foreach testMask $allMasks eventCode $allCodes {
	    if {($testMask & $sendmask) != 0} {
	      ::log::log debug "*** $self SendEventData testMask = $testMask, eventCode = $eventCode"
	      append writebuffer $comma
	      switch $eventCode {
		REVERSER {
		  append writebuffer [format "REVERSER=%d" [$RailDriver GetReverser]]
		}
		THROTTLE {
		  append writebuffer [format "THROTTLE=%d" [$RailDriver GetThrottle]]
		}
		AUTOBRAKE {
		  append writebuffer [format "AUTOBRAKE=%d" [$RailDriver GetAutoBrake]]
		}
		INDEPENDBRK {
		  append writebuffer [format "INDEPENDBRK=%d" [$RailDriver GetIndependBrake]]
		}
		BAILOFF {
		  append writebuffer [format "BAILOFF=%d" [$RailDriver GetBailOff]]
		}
		WIPER {
		  append writebuffer [format "WIPER=%d" [$RailDriver GetWiper]]
		}
		HEADLIGHT {
		  append writebuffer [format "HEADLIGHT=%d" [$RailDriver GetHeadlight]]
		}
		DIGITAL1 {
		  append writebuffer "DIGITAL1=("
		  set comma {}
		  if {[$RailDriver GetBlueButton1]} {
		    append writebuffer "${comma}BB1"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton2]} {
		    append writebuffer "${comma}BB2"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton3]} {
		    append writebuffer "${comma}BB3"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton4]} {
		    append writebuffer "${comma}BB4"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton5]} {
		    append writebuffer "${comma}BB5"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton6]} {
		    append writebuffer "${comma}BB6"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton7]} {
		    append writebuffer "${comma}BB7"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton8]} {
		    append writebuffer "${comma}BB8"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
		DIGITAL2 {
		  append writebuffer "DIGITAL2=("
		  set comma {}
		  if {[$RailDriver GetBlueButton9]} {
		    append writebuffer "${comma}BB9"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton10]} {
		    append writebuffer "${comma}BB10"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton11]} {
		    append writebuffer "${comma}BB11"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton12]} {
		    append writebuffer "${comma}BB12"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton13]} {
		    append writebuffer "${comma}BB13"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton14]} {
		    append writebuffer "${comma}BB14"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton15]} {
		    append writebuffer "${comma}BB15"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton16]} {
		    append writebuffer "${comma}BB16"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
		DIGITAL3 {
		  append writebuffer "DIGITAL3=("
		  set comma {}
		  if {[$RailDriver GetBlueButton17]} {
		    append writebuffer "${comma}BB17"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton18]} {
		    append writebuffer "${comma}BB19"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton19]} {
		    append writebuffer "${comma}BB19"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton20]} {
		    append writebuffer "${comma}BB20"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton21]} {
		    append writebuffer "${comma}BB21"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton22]} {
		    append writebuffer "${comma}BB22"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton23]} {
		    append writebuffer "${comma}BB23"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton24]} {
		    append writebuffer "${comma}BB24"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
		DIGITAL4 {
		  append writebuffer "DIGITAL4=("
		  set comma {}
		  if {[$RailDriver GetBlueButton25]} {
		    append writebuffer "${comma}BB25"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton26]} {
		    append writebuffer "${comma}BB26"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton27]} {
		    append writebuffer "${comma}BB27"
		    set comma ";"
		  }
		  if {[$RailDriver GetBlueButton28]} {
		    append writebuffer "${comma}BB28"
		    set comma ";"
		  }
		  if {[$RailDriver GetZoomUp]} {
		    append writebuffer "${comma}Zoom Up"
		    set comma ";"
		  }
		  if {[$RailDriver GetZoomDown]} {
		    append writebuffer "${comma}Zoom Down"
		    set comma ";"
		  }
		  if {[$RailDriver GetPanUp]} {
		    append writebuffer "${comma}Pan Up"
		    set comma ";"
		  }
		  if {[$RailDriver GetPanRight]} {
		    append writebuffer "${comma}Pan Right"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
		DIGITAL5 {
		  append writebuffer "DIGITAL5=("
		  set comma {}
		  if {[$RailDriver GetPanDown]} {
		    append writebuffer "${comma}Pan Down"
		    set comma ";"
		  }
		  if {[$RailDriver GetPanLeft]} {
		    append writebuffer "${comma}Pan Left"
		    set comma ";"
		  }
		  if {[$RailDriver GetRangeUp]} {
		    append writebuffer "${comma}Range Up"
		    set comma ";"
		  }
		  if {[$RailDriver GetRangeDown]} {
		    append writebuffer "${comma}Range Down"
		    set comma ";"
		  }
		  if {[$RailDriver GetEBrakeUp]} {
		    append writebuffer "${comma}Emergency Brake Up"
		    set comma ";"
		  }
		  if {[$RailDriver GetEBrakeDown]} {
		    append writebuffer "${comma}Emergency Brake Down"
		    set comma ";"
		  }
		  if {[$RailDriver GetAlert]} {
		    append writebuffer "${comma}Alert"
		    set comma ";"
		  }
		  if {[$RailDriver GetSand]} {
		    append writebuffer "${comma}Sand"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
		DIGITAL6 {
		  append writebuffer "DIGITAL6=("
		  set comma {}
		  if {[$RailDriver GetPantograph]} {
		    append writebuffer "${comma}Pantograph1"
		    set comma ";"
		  }
		  if {[$RailDriver GetBell]} {
		    append writebuffer "${comma}Bell"
		    set comma ";"
		  }
		  if {[$RailDriver GetWhistleUp]} {
		    append writebuffer "${comma}Whistle Up"
		    set comma ";"
		  }
		  if {[$RailDriver GetWhistleDown]} {
		    append writebuffer "${comma}Whistle Down"
		    set comma ";"
		  }
		  append writebuffer ")"
		  set comma ","
		}
	      }
	      set comma ","
	      ::log::log debug "*** -: writebuffer is $writebuffer"
	      ::log::log debug "*** -: [string length $writebuffer] characters"
	      if {[string length $writebuffer] > $maxwrite} {
		puts $sockfd $writebuffer
		set writebuffer "202 Events: "
		set comma {}
	      }
	    }
	  }
	  ::log::log debug "*** -: (bottom) writebuffer is $writebuffer"
	  if {$writebuffer ne "202 Events: "} {puts $sockfd $writebuffer}
	}
}



eval [list RaildriverServer Initialize] $::argv
vwait forever
