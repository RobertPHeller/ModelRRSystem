#* 
#* ------------------------------------------------------------------
#* MRDTest.src - Test program for MRD units
#* Created by Robert Heller on Mon Oct 24 12:44:45 2011
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id$

## @defgroup MRDTest MRDTest
#  @brief MRD test program
#
# @section SYNOPSIS
# 
# MRDTest [X11 Resource Options]
# 
# @section DESCRIPTION
#
# This program is a GUI program for testing MRD units.  
#
# @section PARAMETERS 
# 
# none 
#  
# @section AUTHOR 
# Robert Heller \<heller\@deepsoft.com\>
#

set argv0 [file join  [file dirname [info nameofexecutable]] MRDTest]

package require Azatrax

package require gettext
package require Tk
package require tile
package require snit
package require snitStdMenuBar
package require HTMLHelp 2.0
package require Dialog
package require MainFrame
package require LabelFrames
package require ButtonBox

#puts stderr "*** class of . is [. cget -class]"

global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
							[info script]]]] Help]
#puts stderr "*** HelpDir = $HelpDir"
set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
							[info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"

## Make RO bindings tags for ttk::radiobutton and ttk::checkbutton
ttk::copyBindings TRadiobutton TRadiobutton_RO
ttk::copyBindings TCheckbutton TCheckbutton_RO
bind TRadiobutton_RO <Key-space> {}
bind TCheckbutton_RO <Key-space> {}
bind TRadiobutton_RO <<Invoke>> {}
bind TCheckbutton_RO <<Invoke>> {}
bind TRadiobutton_RO <ButtonPress-1> {}
bind TCheckbutton_RO <ButtonPress-1> {}
bind TRadiobutton_RO <ButtonRelease-1> {}
bind TCheckbutton_RO <ButtonRelease-1> {}
bind TRadiobutton_RO <Button1-Leave> {}
bind TCheckbutton_RO <Button1-Leave> {}
bind TRadiobutton_RO <Button1-Enter> {}
bind TCheckbutton_RO <Button1-Enter> {}



proc MainWindow {} {

  # Window manager configurations
  wm minsize . 300 1
  wm protocol . WM_DELETE_WINDOW {CareFulExit}
  wm title . [_ "MRD Test Program for MRD Units"]

  set menubar [StdMenuBar MakeMenu \
	-file [list [_m "Menu|&File"] {file} {file} 0 [list \
	        [list command [_m "Menu|File|&New"]     {file:new} ""     {Ctrl n} -state disabled]\
	        [list command [_m "Menu|File|&Open..."] {file:open} [_ "Open Unit"] {Ctrl o} -command {OpenUnit}]\
	        [list command [_m "Menu|File|&Save"]    {file:save} "" {Ctrl s} -state disabled]\
		[list command [_m "Menu|File|Save &As..."] {file:save} "" {Ctrl a} -state disabled]\
	        [list command [_m "Menu|File|&Close"] {file:close} [_ "Close Unit"] {} -command {CloseUnit} -state disabled]\
	        [list command [_m "Menu|File|E&xit"] {file:exit} [_ "Exit the application"] {} -command {CareFulExit}]\
	     ] \
	] -help [list [_m "Menu|&Help"] {help} {help} 0 [list \
		[list command [_m "Menu|Help|On &Help..."] {help:help} [_ "Help on help"] {} -command "HTMLHelp help Help"]\
		[list command [_m "Menu|Help|On &Version"] {help:version} [_ "Version"] {} -command "HTMLHelp help Version"]\
		[list command [_m "Menu|Help|Warranty"] {help:warranty} [_ "Warranty"] {} -command "HTMLHelp help Warranty"]\
		[list command [_m "Menu|Help|Copying"] {help:copying} [_ "Copying"] {} -command "HTMLHelp help Copying"]\
		[list command [_m "Menu|Help|Reference Manual"] {help:reference} [_ "Reference Manual"] {} -command {HTMLHelp help "MRD Test Program Reference"}]\
		] \
        ]]
#  puts stderr "*** MainWindow: menubar = $menubar"
#  foreach x $menubar {
#    puts stderr [list *** x = $x]
#  }

  set ::Main [MainFrame .main -menu $menubar \
	-progressmax 100 -progresstype normal -progressvar ::progress \
	-textvariable status \
	-separator both]
  pack $::Main -expand yes -fill both
  $::Main showstatusbar progression

  set ::MainFrame [$::Main getframe]

  HTMLHelp setDefaults "$::HelpDir" "index.html#toc"

  LabelFrame $::MainFrame.snframe -width 22 -text "Serial Number To open:"
  pack $::MainFrame.snframe -fill x
  set snframe [$::MainFrame.snframe getframe]
  set ::SerialNumber [ttk::combobox $snframe.serialNumber \
				-state normal \
				-values [Azatrax_AllConnectedDevices]]
  pack $::SerialNumber -side left -fill x -expand yes
  bind $::SerialNumber <Return> {OpenUnit}
  set rescan [ttk::button $snframe.rescan -text "Rescan" \
			-command {$::SerialNumber configure -values [Azatrax_AllConnectedDevices]}]
  pack $rescan -side right

  # build widget $::MainFrame.commands
  ttk::labelframe $::MainFrame.commands \
    -text {Commands} -labelanchor nw

  pack configure $::MainFrame.commands -fill x

  # Row 1
  ttk::button $::MainFrame.commands.setchan1 \
	-text "Set Channel 1" \
	-command {catch {mrdunit SetChan1} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.setchan1 -column 0  -row 0 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.setchan1
  ttk::button $::MainFrame.commands.setchan2 \
	-text "Set Channel 2" \
	-command {catch {mrdunit SetChan2} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.setchan2 -column 1  -row 0 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.setchan2

  # Row 2
  ttk::button $::MainFrame.commands.clearExternallyChanged \
	-text "Clear Externally Changed" \
	-command {catch {mrdunit ClearExternallyChanged} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.clearExternallyChanged -column 0  -row 1 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.clearExternallyChanged

  # Row 3
  ttk::button $::MainFrame.commands.disableExternal \
	-text "Disable External" \
	-command {catch {mrdunit DisableExternal} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.disableExternal -column 0  -row 2 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.disableExternal
  ttk::button $::MainFrame.commands.enableExternal \
	-text "Enable External" \
	-command {catch {mrdunit EnableExternal} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.enableExternal -column 1  -row 2 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.enableExternal

  # Row 4
  ttk::button $::MainFrame.commands.restoreLEDs \
	-text "Restore LEDs" \
	-command {catch {mrdunit RestoreLEDFunction} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.restoreLEDs -column 0 -row 3 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.restoreLEDs
  ttk::button $::MainFrame.commands.id1 \
	-text "Identify 1" \
	-command {catch {mrdunit Identify_1} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.id1 -column 1 -row 3 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.id1
  ttk::button $::MainFrame.commands.id2 \
	-text "Identify 2" \
	-command {catch {mrdunit Identify_2} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.id2 -column 2 -row 3 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.id2
  ttk::button $::MainFrame.commands.idBoth \
	-text "Identify Both" \
	-command {catch {mrdunit Identify_1_2} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.idBoth -column 3 -row 3 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.idBoth

  # Row 5
  ttk::button $::MainFrame.commands.resetStopwatch \
	-text "Reset Stopwatch" \
	-command {catch {mrdunit ResetStopwatch} ::status} \
	-state disabled
  grid configure $::MainFrame.commands.resetStopwatch -column 0 -row 4 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.resetStopwatch

  # Row 6
  ttk::button $::MainFrame.commands.getStateData \
	-text "Get Sense Data" \
	-command {if {![catch {mrdunit GetStateData} ::status]} {UpdateSenseData}} \
	-state disabled
  grid configure $::MainFrame.commands.getStateData -column 0 -row 5 -sticky we
  lappend ::CommandButtons $::MainFrame.commands.getStateData

  # build widget $::MainFrame.sensedata
  ttk::labelframe $::MainFrame.sensedata \
    -text {Sense Data} -labelanchor nw

  pack configure $::MainFrame.sensedata -fill x

  LabelEntry $::MainFrame.sensedata.packetCount \
	-labelwidth 22 \
	-label "Packet Count" \
	-editable no -text 0
  pack $::MainFrame.sensedata.packetCount -fill x
  LabelFrame $::MainFrame.sensedata.senseLatch \
  	-width 22 -text "Sense / Latch"
  pack $::MainFrame.sensedata.senseLatch -fill x
  set slframe [$::MainFrame.sensedata.senseLatch getframe]
  foreach rb    {sense1 sense2 latch1 latch2} \
	  rbLab {{Sense 1} {Sense 2} {Latch 1} {Latch 2}} \
	  rbVar {senseLatch(sense,1) senseLatch(sense,2)
		 senseLatch(latch,1) senseLatch(latch,2)} {
    set b [ttk::radiobutton $slframe.$rb -variable $rbVar -text $rbLab \
                        -value 1]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelFrame $::MainFrame.sensedata.hasRelays \
	-width 22 -text "Has Relays?"
  pack $::MainFrame.sensedata.hasRelays -fill x
  set hrframe [$::MainFrame.sensedata.hasRelays getframe]
  foreach rb    {yes no} rbLab {Yes No} rbVal {1 0} {
    set b [ttk::radiobutton $hrframe.$rb -variable HasRelays -text $rbLab \
		-value $rbVal]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelFrame $::MainFrame.sensedata.resetStatus \
	-width 22 -text "Reset Status?"
  pack $::MainFrame.sensedata.resetStatus -fill x
  set rsframe [$::MainFrame.sensedata.resetStatus getframe]
  foreach rb    {yes no} rbLab {Yes No} rbVal {1 0} {
    set b [ttk::radiobutton $rsframe.$rb -variable ResetStatus -text $rbLab \
		-value $rbVal]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelFrame $::MainFrame.sensedata.stopwatchTicking \
	-width 22 -text "Stopwatch Ticking?"
  pack $::MainFrame.sensedata.stopwatchTicking -fill x
  set stframe [$::MainFrame.sensedata.stopwatchTicking getframe]
  foreach rb    {yes no} rbLab {Yes No} rbVal {1 0} {
    set b [ttk::radiobutton $stframe.$rb -variable StopwatchTicking -text $rbLab \
		-value $rbVal]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelFrame $::MainFrame.sensedata.externallyChanged \
	-width 22 -text "Externally Changed?"
  pack $::MainFrame.sensedata.externallyChanged -fill x
  set ecframe [$::MainFrame.sensedata.externallyChanged getframe]
  foreach rb    {yes no} rbLab {Yes No} rbVal {1 0} {
    set b [ttk::radiobutton $ecframe.$rb -variable ExternallyChanged -text $rbLab \
		-value $rbVal]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelFrame $::MainFrame.sensedata.allowExternalChanges \
	-width 22 -text "Allow External Changes?"
  pack $::MainFrame.sensedata.allowExternalChanges -fill x
  set aecframe [$::MainFrame.sensedata.allowExternalChanges getframe]
  foreach rb    {yes no} rbLab {Yes No} rbVal {1 0} {
    set b [ttk::radiobutton $aecframe.$rb -variable AllowExternalChanges -text $rbLab \
		-value $rbVal]
    pack $b -side left
    set tags [bindtags $b]
    set i [lsearch -exact $tags TRadiobutton]
    if {$i >= 0} {
      bindtags $b [lreplace $tags $i $i TRadiobutton_RO]
    }
  }
  LabelEntry $::MainFrame.sensedata.stopwatch \
	-labelwidth 22 -label "Stopwatch:" -editable no
  pack $::MainFrame.sensedata.stopwatch -fill x
  LabelEntry $::MainFrame.sensedata.operatingMode \
	-labelwidth 22 -label "Operating Mode:" -editable no
  pack $::MainFrame.sensedata.operatingMode -fill x
  LabelEntry $::MainFrame.sensedata.serialNumber \
	-labelwidth 22 -label "Unit Serial Number:" -editable no
  pack $::MainFrame.sensedata.serialNumber -fill x

  set w .
  global IsSlave
  if {!$IsSlave} {
    wm withdraw $w
    update idletasks
    set rw [winfo reqwidth $w]
    if {$rw < 200} {set rw 300}
    set rh [winfo reqheight $w]
    set x [expr {[winfo screenwidth $w]/2 - $rw/2 \
            - [winfo vrootx $w]}]
    set y [expr {[winfo screenheight $w]/2 - $rh/2 \
            - [winfo vrooty $w]}]
    wm geom $w =${rw}x${rh}+$x+$y
    wm deiconify .
  }
  update idletasks
  wm minsize . [winfo reqwidth $w] [expr [winfo reqheight $w] + 35]
  bind all <q> CareFulExit
  bind all <Q> CareFulExit
}

proc CareFulExit {} {
# Procedure to carefully exit.
# [index] CarefulExit!procedure

  if {[string compare \
        [tk_messageBox -default no -icon question -message [_ "Really Quit?"] \
                -title [_ "Careful Exit"] -type yesno] {yes}] == 0} {
    global IsSlave
    #puts stderr "*** CarefulExit: IsSlave = $IsSlave"
    flush stderr
    if {$IsSlave} {
      puts stdout "101 Exit"
      flush stdout
      set ans [gets stdin]
      #puts stderr "*** CarefulExit: ans = '$ans'"
    }
    if {[llength [info command mrdunit]] > 0} {
      CloseUnit 0
    }
    exit
  }
}

# Open a selected unit...
proc OpenUnit {} {

  set serialnumber [$::SerialNumber get]

  #puts stderr "*** OpenUnit: serialnumber is '$serialnumber'"

  #puts stderr "*** OpenUnit: info command mrdunit = [info command mrdunit]"

  if {[llength [info command mrdunit]] > 0} {
    CloseUnit
  }

  
  if {[string length "$serialnumber"] != 0} {
    if {[catch {MRD mrdunit -this [Azatrax_OpenDevice "$serialnumber" $::Azatrax_idMRDProduct]} errormessage]} {
      #puts stderr "*** OpenUnit: errormessage = $errormessage"
      catch {rename mrdunit {}}
      set ::status [_ "Failed to open unit because %s." errormessage]
      tk_messageBox -icon error -message "$errormessage" -type ok
    } else {
      #puts stderr "*** OpenUnit: Serial Number is [mrdunit SerialNumber]"
      foreach b $::CommandButtons {$b configure -state normal}
      $::Main setmenustate file:close normal
      if {![catch {mrdunit GetStateData} ::status]} {
	UpdateSenseData
      }
    }
  }
}

proc CloseUnit {{messageP 1}} {
  foreach b $::CommandButtons {$b configure -state disabled}
  $::Main setmenustate file:close disabled
  catch {rename mrdunit {}}
  if {$messageP} {
    tk_messageBox -icon info -message [_ "Unit %s closed." [$::MainFrame.sensedata.serialNumber cget -text]]
  }
}

proc UpdateSenseData {} {
  $::MainFrame.sensedata.packetCount configure -text [mrdunit PacketCount]
  set ::senseLatch(sense,1) [mrdunit Sense_1]
  set ::senseLatch(sense,2) [mrdunit Sense_2]
  set ::senseLatch(latch,1) [mrdunit Latch_1]
  set ::senseLatch(latch,2) [mrdunit Latch_2]
  set ::HasRelays [mrdunit HasRelays]
  set ::ResetStatus [mrdunit ResetStatus]
  set ::StopwatchTicking [mrdunit StopwatchTicking]
  set ::ExternallyChanged [mrdunit ExternallyChanged]
  set ::AllowExternalChanges [mrdunit AllowingExternalChanges]
  foreach {f s m h} [mrdunit Stopwatch] {break}
  $::MainFrame.sensedata.stopwatch configure -text \
	[format {%d:%02d:%02d.%02d} $h $m $s $f]
  $::MainFrame.sensedata.operatingMode configure -text [mrdunit OperatingMode]
  $::MainFrame.sensedata.serialNumber configure -text [mrdunit SerialNumber]
}

# Process command line options.

global IsSlave
set IsSlave 0
global argcTest
set argcTest 0
global argc argv argv0

for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      incr argcTest
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -psn* {
    }
    default {
      puts stderr "usage: $argv0 \[wish options\]"
      exit 96
    }
  }
}

MainWindow
