#* 
#* ------------------------------------------------------------------
#* AzatraxDeviceMap.src - Device Mapping program
#* Created by Robert Heller on Sat Nov 26 15:52:57 2011
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 


# $Id$

## @defgroup AzatraxDeviceMap AzatraxDeviceMap
#  @brief Azatrax mapping program
#
# @section SYNOPSIS
# 
# AzatraxDeviceMap [X11 Resource Options] [mapfile]
# 
# @section DESCRIPTION
#
# This program is a GUI program for mapping Azatrax units.  
#
# @section PARAMETERS 
# 
# Optional mapfile
#  
# @section AUTHOR 
# Robert Heller \<heller\@deepsoft.com\>
#

set argv0 [file join  [file dirname [info nameofexecutable]] AzatraxDeviceMap]

package require Azatrax

package require gettext
package require Tk
package require tile
package require snit
package require snitStdMenuBar
package require HTMLHelp 2.0
package require Dialog
package require MainFrame
package require LabelFrames
package require ButtonBox
package require struct::matrix
package require csv

#puts stderr "*** class of . is [. cget -class]"

global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
							[info script]]]] Help]
#puts stderr "*** HelpDir = $HelpDir"
set msgfiles [::msgcat::mcload [file join [file dirname [file dirname [file dirname \
							[info script]]]] Messages]]
#puts stderr "*** msgfiles = $msgfiles"


snit::widget DeviceMap {
  component devicemap;#		The device map itself
  component snFrame;#		Serial Number selector frame
  component   serialNumberCB;#	The serial number
  component   lookupButton;#	Lookup serial number
  component   rescanButton;#	Rescan button
  component flashLEDsButton;#	Flash LEDs
  component nameLE;#		Device name
  component descrLF;#		description frame
  component   descrSW;#		description scroll window
  component     descrText;#	description text
  component buttons;#		Button box

  variable dirty no;#		dirty flag
  variable serialNumberCol 0
  variable nameCol 1
  variable descCol 2
  variable productCol 3
  variable currentRow -1
  variable columnCount 3
  variable serialnumber 0
  option -filename -default {};# Current filename
  option -dirtycallback -default {} -readonly yes

  variable azatraxOpen {}

  constructor {args} {
    install snFrame using LabelFrame $win.snFrame -width 22 \
						  -text "Serial Number:"
    pack $snFrame -fill x
    set snframe [$snFrame getframe]
    install serialNumberCB using ttk::combobox $snframe.serialNumberCB \
					-state normal \
					-values [Azatrax_AllConnectedDevices]
    pack $serialNumberCB -side left -fill x -expand yes
    bind $serialNumberCB <Return> [mymethod _serialNumberLookup]
    install lookupButton using ttk::button $snframe.lookupButton \
			-text "Lookup" \
			-command [mymethod _serialNumberLookup]
    pack $lookupButton -side left
    install rescanButton using ttk::button $snframe.rescanButton \
			-text "Rescan" \
			-command [mymethod _rescanSerialNumbers]
    pack $rescanButton -side right
    install flashLEDsButton using ttk::button $win.flashLEDsButton \
    			-text "Flash LEDs" \
			-command [mymethod _flashLEDs]
    pack $flashLEDsButton -fill x -expand yes
    install nameLE using LabelEntry $win.nameLE -labelwidth 22 \
						-label "Name:" \
						-text {}
    pack $nameLE -fill x -expand yes
    install descrLF using labelframe $win.descrLF -borderwidth {4} \
						  -relief {ridge} \
						  -text {Description}
    pack $descrLF -fill both -expand yes
    install descrSW using ScrolledWindow $descrLF.descrSW -auto both \
							  -scrollbar both
    pack $descrSW -fill both -expand yes
    install descrText using text $descrSW.descrText -height 10 -width 20
    pack $descrText -fill both -expand yes
    $descrSW setwidget $descrText

    install buttons using ButtonBox $win.buttons -orient horizontal
    pack $buttons -fill x
    $buttons add ttk::button add -text Update -command [mymethod _update_row]
    $buttons add ttk::button delete -text Delete -command [mymethod _delete_row]

#    puts stderr "*** $type create $self $args"
    $self configurelist $args

#    puts stderr "*** $type create $self: options(-filename) = $options(-filename)"
    if {$options(-filename) eq ""} {
      $self new
    } else {
      $self open $options(-filename)
    }
  }
  method _serialNumberLookup {} {
#    puts stderr "*** $self _serialNumberLookup: devicemap is $devicemap"
#    puts stderr "*** $self _serialNumberLookup: serialNumberCB is $serialNumberCB"
    set found [$devicemap search -exact column $serialNumberCol [$serialNumberCB get]]
#    puts stderr "*** $self _serialNumberLookup: found = $found"
#    puts stderr "*** $self _serialNumberLookup: \[llength \$found\] = [llength $found]"
    if {[llength $found] < 1} {
      set row [$self _emptyrow]
      set row [lreplace $row $serialNumberCol $serialNumberCol [$serialNumberCB get]]
      $nameLE configure -text {}
      $descrText delete 1.0 end
      $devicemap add row $row
      set currentRow [expr {[$devicemap rows] - 1}]
#      puts stderr "*** $self _serialNumberLookup: (new) currentRow is $currentRow"
      $self setdirty yes
    } else {
      set rowIndx [lindex [lindex $found 0] 1]
      set row [$devicemap get row $rowIndx]
      $nameLE configure -text [lindex $row $nameCol]
      $descrText delete 1.0 end
      $descrText insert end [lindex $row $descCol]
      set currentRow $rowIndx
#      puts stderr "*** $self _serialNumberLookup: (old) currentRow is $currentRow"
      
    }
  }
  method _rescanSerialNumbers {} {
    $serialNumberCB configure -values [Azatrax_AllConnectedDevices]
  }
  method _flashLEDs {} {
    set serialnumber [$serialNumberCB get]
    if {"$azatraxOpen" eq ""} {
      if {[string length "$serialnumber"] != 0} {
	if {[catch {Azatrax_OpenDevice $serialnumber 0} errormessage]} {
	  tk_messageBox -icon error -message "$errormessage"
	} else {
	  set azatraxOpen $errormessage
	  $azatraxOpen Identify_1
	  $flashLEDsButton configure -text "Stop flashing LEDs"
	}
      }
    } else {
      $azatraxOpen RestoreLEDFunction
      delete_Azatrax $azatraxOpen
      $azatraxOpen -delete
      set azatraxOpen {}
      $flashLEDsButton configure -text "Flash LEDs"
    }
  }
  method _update_row {} {
#    puts stderr "*** $self _update_row currentRow = $currentRow"
    if {$currentRow < 0} {return}
    set row [$devicemap get row $currentRow]
#    puts stderr "*** $self _update_row nameCol = $nameCol, descCol = $descCol"
    if {$nameCol >= 0} {set row [lreplace $row $nameCol $nameCol [$nameLE cget -text]]}
    if {$descCol >= 0} {set row [lreplace $row $descCol $descCol [$descrText get 1.0 end-1c]]}
    if {$productCol >= 0} {
      if {"$azatraxOpen" eq ""} {
	if {[string length "$serialnumber"] != 0} {
	  if {[catch {Azatrax_OpenDevice $serialnumber} errormessage]} {
	    tk_messageBox -icon error -message "$errormessage"
	  } else {
	    set row [lreplace $row $productCol $productCol [$errormessage MyProduct]]
	    delete_Azatrax $errormessage
	    $errormessage -delete
	  }
	}
      } else {
	set row [lreplace $row $productCol $productCol [$azatraxOpen MyProduct]]
      }
    }	  
#    puts stderr "*** $self _update_row row is $row"
    $devicemap set row $currentRow $row
    $self setdirty yes
  }
  method _delete_row {} {
    $devicemap delete row $currentRow
    $self setdirty yes
    set currentRow -1
  }
  method _emptyrow {} {
    set row {}
    for {set j 0} {$j < $columnCount} {incr j} {lappend row {}}
    return row
  }
  method new {} {
#    puts stderr "*** $self new"
    if {$dirty} {
      if {[tk_messageBox -default yes -icon question \
		-message "Current map not saved.  Do you want to save it?" \
		-type yesno]} {
	$self save
      }
    }
    if {[catch {set devicemap}] || $devicemap ne ""} {$devicemap destroy}
    set devicemap [::struct::matrix]
#    puts stderr "*** $self new: devicemap is $devicemap"
    $devicemap add column SerialNumber
    $devicemap add column Name
    $devicemap add column Description
    $devicemap add column Product
    $devicemap add row {SerialNumber Name Description Product}
    set serialNumberCol 0
    set nameCol 1
    set descCol 2
    set productCol 3
    set currentRow -1
    set columnCount 4
  }
  method open {{filename {}}} {
#    puts stderr "*** $self open $filename"
    if {$dirty} {
      if {[tk_messageBox -default yes -icon question \
		-message "Current map not saved.  Do you want to save it?" \
		-type yesno]} {
	$self save
      }
    }
    if {"$filename" eq ""} {
      set filename [tk_getOpenFile -defaultextension .csv \
				   -filetypes { {{CSV Files} {.csv} TEXT}   \
						{{All Files} *          } } \
				   -initialdir [file dirname $filename] \
				   -initialfile $filename \
				   -parent [winfo toplevel $win] \
				   -title "Filename to open"]
      if {$filename eq ""} {return}
    }
    if {[catch {open $filename r} theChan]} {
      tk_messageBox -icon error -message "Could not open $filename: $theChan" -type ok
      return
    }
    if {[catch {set devicemap}] || $devicemap ne ""} {$devicemap destroy}
    set devicemap [::struct::matrix]
#    puts stderr "*** $self open: devicemap is $devicemap"
    ::csv::read2matrix $theChan $devicemap {,} auto
#    puts stderr "*** $self open: devicemap contains [$devicemap serialize]"
    close $theChan
    set columnCount [$devicemap columns]
#    puts stderr "*** $self open: devicemap has $columnCount columns"
    set sn [$devicemap search -nocase row 0 "SerialNumber"]
#    puts stderr "*** $self open: sn is $sn"
    if {[llength $sn] < 1} {
      tk_messageBox -icon warning -message "No SerialNumber column in $filename!"
      return
    }
    set serialNumberCol [lindex [lindex $sn 0] 0]
#    puts stderr "*** $self open: serialNumberCol is $serialNumberCol"
    set nm [$devicemap search -nocase row 0 "Name"]
#    puts stderr "*** $self open: nm is $nm"
    if {[llength $nm] < 1} {
      set nameCol -1
    } else {
      set nameCol [lindex [lindex $nm 0] 0]
    }
    set ds [$devicemap search -nocase row 0 "Description"]
#    puts stderr "*** $self open: ds is $ds"
    if {[llength $ds] < 1} {
      set descCol -1
    } else {
      set descCol [lindex [lindex $ds 0] 0]
    }
    set ds [$devicemap search -nocase row 0 "Product"]
#    puts stderr "*** $self open: ds is $ds"
    if {[llength $ds] < 1} {
      set productCol -1
    } else {
      set productCol [lindex [lindex $ds 0] 0]
    }
  }
  method save {} {
    $self saveas "$options(-filename)"
  }
  method saveas {{filename {}}} {
    if {"$filename" eq ""} {
      set filename [tk_getSaveFile -defaultextension .csv \
				   -filetypes { {{CSV Files} {.csv} TEXT}   \
						{{All Files} *          } } \
				   -initialdir [file dirname $filename] \
				   -initialfile $filename \
				   -parent [winfo toplevel $win] \
				   -title "Filename to save to"]
      if {$filename eq ""} {return}
    }
    if {[catch {open $filename w} theChan]} {
      tk_messageBox -icon error -message "Could not open $filename: $theChan" -type ok
      return
    }
    ::csv::writematrix $devicemap $theChan {,} {"}
    close $theChan
    $self setdirty no
  }
  method isdirty {} {return $dirty}
  method setdirty {value} {
    set dirty $value
    set dirtycallback [$self cget -dirtycallback]
    if {$dirtycallback ne ""} {
      uplevel #0 $dirtycallback $value
    }
  }    
}

proc MainWindow {{filename {}}} {

#  puts stderr "*** MainWindow $filename"

  # Window manager configurations
  wm minsize . 300 1
  wm protocol . WM_DELETE_WINDOW {CareFulExit}
  wm title . [_ "MRD Device Mapping program"]

  set menubar [StdMenuBar MakeMenu \
	-file [list [_m "Menu|&File"] {file} {file} 0 [list \
	        [list command [_m "Menu|File|&New"]     {file:new} [_ "New Map"]     {Ctrl n} ]\
	        [list command [_m "Menu|File|&Open..."] {file:open} [_ "Open Old Map"] {Ctrl o}]\
	        [list command [_m "Menu|File|&Save"]    {file:save} [_ "Save Map"] {Ctrl s} ]\
		[list command [_m "Menu|File|Save &As..."] {file:save} [_ "Save Map As"] {Ctrl a} ]\
	        [list command [_m "Menu|File|&Close"] {file:close} "" {} -state disabled]\
	        [list command [_m "Menu|File|E&xit"] {file:exit} [_ "Exit the application"] {} -command {CareFulExit}]\
	     ] \
	] -help [list [_m "Menu|&Help"] {help} {help} 0 [list \
		[list command [_m "Menu|Help|On &Help..."] {help:help} [_ "Help on help"] {} -command "HTMLHelp help Help"]\
		[list command [_m "Menu|Help|On &Version"] {help:version} [_ "Version"] {} -command "HTMLHelp help Version"]\
		[list command [_m "Menu|Help|Warranty"] {help:warranty} [_ "Warranty"] {} -command "HTMLHelp help Warranty"]\
		[list command [_m "Menu|Help|Copying"] {help:copying} [_ "Copying"] {} -command "HTMLHelp help Copying"]\
		[list command [_m "Menu|Help|Reference Manual"] {help:reference} [_ "Reference Manual"] {} -command {HTMLHelp help "Azatrax Device Map Reference"}]\
		] \
        ]]
#  puts stderr "*** MainWindow: menubar = $menubar"
#  foreach x $menubar {
#    puts stderr [list *** x = $x]
#  }

  set ::Main [MainFrame .main -menu $menubar \
  	-progressmax 100 -progresstype normal -progressvar ::progress \
	-textvariable status \
	-separator both]
  pack $::Main -expand yes -fill both
  $::Main showstatusbar progression  
  set ::DirtyInd [$::Main addindicator -background black \
                    -image [IconImage image gray50 \
                            -filetype xbm \
                            -foreground [ttk::style lookup . \
                                            -background {} #d9d9d9] \
                            -background {}]]

  set ::MainFrame [$::Main getframe]

  HTMLHelp setDefaults "$::HelpDir" "index.html#toc"

  DeviceMap $::MainFrame.deviceMap -filename $filename -dirtycallback ::DirtyCallBack
  pack $::MainFrame.deviceMap -expand yes -fill both

  set fm [$::Main getmenu file]
  $fm entryconfigure [_m "Menu|File|New"] -command [list $::MainFrame.deviceMap new]
  $fm entryconfigure [_m "Menu|File|Open..."] -command [list $::MainFrame.deviceMap open]
  $fm entryconfigure [_m "Menu|File|Save"] -command [list $::MainFrame.deviceMap save]
  $fm entryconfigure [_m "Menu|File|Save As..."]  -command [list $::MainFrame.deviceMap saveas]
}

proc CareFulExit {} {
# Procedure to carefully exit.
# [index] CarefulExit!procedure

  if {[string compare \
        [tk_messageBox -default no -icon question -message [_ "Really Quit?"] \
                -title [_ "Careful Exit"] -type yesno] {yes}] == 0} {
    global IsSlave
    #puts stderr "*** CarefulExit: IsSlave = $IsSlave"
    flush stderr
    if {$IsSlave} {
      puts stdout "101 Exit"
      flush stdout
      set ans [gets stdin]
      #puts stderr "*** CarefulExit: ans = '$ans'"
    }
    exit
  }
}

proc DirtyCallBack {value} {
  if {$value} {
    $::DirtyInd configure -foreground red
  } else {
    $::DirtyInd configure -foreground black
  }
}

# Process command line options.

global IsSlave
set IsSlave 0
global argcTest
set argcTest 0
global argc argv argv0
global DeviceMapFile
set DeviceMapFile {}

for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      incr argcTest
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -psn* {
    }
    default {
      if {"$DeviceMapFile" eq ""} {
	set DeviceMapFile [lindex $argv $ia]
      } else {
        puts stderr "usage: $argv0 \[wish options\] \[DeviceMapFile\]"
        exit 96
      }
    }
  }
}

MainWindow $DeviceMapFile

