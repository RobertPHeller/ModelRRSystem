#!/bin/sh

/usr/bin/logger -i -t  $0 "$1 $2"

# Source function library.
# Check if $pid (could be plural) are running
checkpid() {
	while [ "$1" ]; do
	   [ -d /proc/$1 ] && return 0
	   shift
	done
	return 1
}
	

# A function to start a program.
daemon() {
	# Test syntax.
	local gotbase= force=
	local base= user= nice= bg= pid
	nicelevel=0
	while [ "$1" != "${1##[-+]}" ]; do
	  case $1 in
	    '')    /usr/bin/logger -i -t $0 "Usage: daemon [+/-nicelevel] {program}"
	           return 1;;
	    --check)
		   base=$2
		   gotbase="yes"
		   shift 2
		   ;;
	    --check=?*)
	    	   base=${1#--check=}
		   gotbase="yes"
		   shift
		   ;;
	    --user)
		   user=$2
		   shift 2
		   ;;
	    --user=?*)
	           user=${1#--user=}
		   shift
		   ;;
	    --force)
	    	   force="force"
		   shift
		   ;;
	    [-+][0-9]*)
	    	   nice="nice -n $1"
	           shift
		   ;;
	    *)     /usr/bin/logger -i -t $0 "Usage: daemon [+/-nicelevel] {program}"
	           return 1;;
	  esac
	done

        # Save basename.
        [ -z "$gotbase" ] && base=${1##*/}

        # See if it's already running. Look *only* at the pid file.
        pid=`pidfileofproc $base`
	
	[ -n "${pid:-}" -a -z "${force:-}" ] && return

	# make sure it doesn't core dump anywhere; while this could mask
	# problems with the daemon, it also closes some security problems
	ulimit -S -c 0 >/dev/null 2>&1
	
	# Echo daemon
        #[ "${BOOTUP:-}" = "verbose" -a -z "$LSB" ] && echo -n " $base"

	# And start it up.
	if [ -z "$user" ]; then
	   $nice "$*"
	else
	   $nice "su -s /bin/bash - $user -c \"$*\""
	fi
	#[ "$?" -eq 0 ] && success $"$base startup" || failure $"$base startup"
	status="$?"
	/usr/bin/logger -i -t $0 "$base startup: status is $status"
}

# A function to stop a program.
killproc() {
	RC=0
	# Test syntax.
	if [ "$#" -eq 0 ]; then
		/usr/bin/logger -i -t $0 "Usage: killproc {program} [signal]"
		return 1
	fi

	notset=0
	# check for second arg to be kill level
	if [ "$2" != "" ] ; then
		killlevel=$2
	else
		notset=1
		killlevel="-9"
	fi

        # Save basename.
        base=${1##*/}

        # Find pid.
	pid=`pidofproc $1`
	if [ -z "${pid:-}" ] ; then
		pid=`pidofproc $base`
	fi

        # Kill it.
        if [ -n "${pid:-}" ] ; then
                #[ "$BOOTUP" = "verbose" -a -z "$LSB" ] && echo -n "$base "
		if [ "$notset" -eq "1" ] ; then
		       if checkpid $pid 2>&1; then
			   # TERM first, then KILL if not dead
			   kill -TERM $pid
			   usleep 100000
			   if checkpid $pid && sleep 1 &&
			      checkpid $pid && sleep 3 &&
			      checkpid $pid ; then
                                kill -KILL $pid
				usleep 100000
			   fi
		        fi
			checkpid $pid
			RC=$?
			#[ "$RC" -eq 0 ] && failure $"$base shutdown" || success $"$base shutdown"
			RC=$((! $RC))
		# use specified level only
		else
		        if checkpid $pid >/dev/null 2>&1; then
	                	kill $killlevel $pid
				RC=$?
				#[ "$RC" -eq 0 ] && success $"$base $killlevel" || failure $"$base $killlevel"
			fi
		fi
	else
	    failure $"$base shutdown"
	    RC=1
	fi

        # Remove pid file if any.
	if [ "$notset" = "1" ]; then
            rm -f /var/run/$base.pid
	fi
	return $RC
}

# A function to find the pid of a program. Looks *only* at the pidfile
pidfileofproc() {
	local base=${1##*/}
	local pid
	
	# Test syntax.
	if [ "$#" = 0 ] ; then
		/usr/bin/logger -i -t $0 "Usage: pidfileofproc {program}"
		return 1
	fi

	# First try "/var/run/*.pid" files
	if [ -f /var/run/${base}.pid ] ; then
	        local line p pid=
		read line < /var/run/${base}.pid
		for p in $line ; do
		       [ -z "${p//[0-9]/}" -a -d /proc/$p ] && pid="$pid $p"
		done
	        if [ -n "${pid:-}" ] ; then
	                echo $pid
	                return 0
	        fi
	fi
}

# A function to find the pid of a program.
pidofproc() {
	base=${1##*/}

	# Test syntax.
	if [ "$#" = 0 ] ; then
		echo $"Usage: pidofproc {program}"
		return 1
	fi

	# First try "/var/run/*.pid" files
	if [ -f /var/run/${base}.pid ] ; then
	        local line p pid=
		read line < /var/run/${base}.pid
		for p in $line ; do
		       [ -z "${p//[0-9]/}" -a -d /proc/$p ] && pid="$pid $p"
		done
	        if [ -n "${pid:-}" ] ; then
	                echo $pid
	                return 0
	        fi
	fi

	# Next try "pidof"
	pidof -o $$ -o $PPID -o %PPID -x $1 || \
	pidof -o $$ -o $PPID -o %PPID -x ${base}
}

thedaemon==sbindir=/raildriverd


RETVAL=0

start() {
	hidraw=$1
# For older kernels, uncomment the following two lines.
#	/usr/bin/logger -i -t  $0 "Removing hid module"
#	/sbin/modprobe -r hid
	/usr/bin/logger -i -t  $0 "Starting daemon: $thedaemon /dev/${hidraw}"
	$thedaemon /dev/${hidraw}&
	RETVAL=$?
}

stop() {
	hidraw=$1
	pidfile=`printf "/var/run/raildriverd-_dev_%s.pid\n" $hidraw`
        [ ! -e $pidfile ] && return
	pid=`cat $pidfile`
	/usr/bin/logger -i -t  $0 "Killing daemon for device /dev/$hidraw: $pid"
	kill -TERM $pid
	RETVAL=$?
}

#if test "x$SUBSYSTEM" != "xinput"; then
#  exit
#fi


hidraw="$2"
      
/usr/bin/logger -i -t  $0 "hidraw = $hidraw"

# See how we were called.
case "$1" in
  add)
        /usr/bin/logger -i -t  $0 "Adding"
        pidfile=`printf "/var/run/raildriverd-_dev_%s.pid\n" $hidraw`
        /usr/bin/logger -i -t  $0 "pidfile = $pidfile"
	if test -e $pidfile; then
          pid=`cat $pidfile`
          /usr/bin/logger -i -t  $0 "pid = $pid"
          if [ -e /proc/$pid ] ; then 
             /usr/bin/logger -i -t  $0 "Already running!"
  	     exit 1
  	  else
  	     rm -f $pidfile
  	  fi
	fi
	#stop $hidraw
	start $hidraw
	;;
  remove)
        /usr/bin/logger -i -t  $0 "Removing"
	stop $hidraw
	;;
  *)
	echo "Usage: $0 {add|remove} PHYSDEVPATH"
	exit 1
esac

/usr/bin/logger -i -t $0 "RETVAL = ${RETVAL}"

exit ${RETVAL}



